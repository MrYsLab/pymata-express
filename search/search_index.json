{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"pymata-express A User's Guide What is pymata-express? Pymata-Express is a Python 3 compatible (Version 3.7 or above) Firmata Protocol client. When used in conjunction with an Arduino Firmata sketch, it permits you to control and monitor Arduino hardware remotely over a serial link. Like its conventional sibling pymata4, pymata-express allows you to take advantage of the advanced feature set of the FirmataExpress (recommended) or StandardFirmata Arduino server sketches. However, unlike its conventional sibling, pymata-expresses implements its API utilizing the Python asyncio package . Pymata-Express Major Features: Applications are programmed using the Python 3 asyncio package. Data change events may be associated with a callback function for asynchronous notification, or polling may be used when a synchronous approach is desired. Each data change event is time-stamped and stored. API Reference Documentation is available online. A full set of working examples are available for download online. Supports StandardFirmataWiFi. Why Use Asyncio? You may be wondering why you might consider using pymata-express instead of pymata4. Pymata-express tends to execute more quickly than pymata4 and at a lower CPU utilization rate. If you run the stress_test.py examples available in both packages, pymata-express completes the task approximately 10% faster than pymata4 and at a significantly lower CPU utilization rate. That being said, if you are not already familiar with asyncio, you may find the asyncio learning curve is rather steep (but worth it, in my opinion). If you are more comfortable with traditional Python programming, then pymata4 may be the better choice. Both packages have similar APIs, and the set of examples provided in each package parallels the other. Compare examples to get an understanding of the differences No matter which package you pick, since the APIs between the two packages are so similar, converting an application from one API to another should be straight forward. Advantages of Using The FirmataExpress Sketch Over StandardFirmata: The data link runs at 115200, twice the speed of StandardFirmata. Advanced Arduino auto-discovery support is provided. Additional hardware support is provided for: HC-SR04 ultrasonic distance sensors. DHT Humidity/Temperature sensors (in collaboration with Martyn Wheeler). Stepper motors. Tone generation for piezo devices. An Intuitive And Easy To use API For example, to receive asynchronous digital pin state data change notifications, you simply do the following: Set a pin mode for the pin and register a callback function. Have your application sit in a loop waiting for notifications. When pymata-express executes your callback method, the data parameter will contain a list of items that describe the change event, including a time-stamp. Here is an example demonstrating using a callback to monitor the state changes of a digital input pin. import asyncio import time import sys from pymata_express import pymata_express \"\"\" Setup a pin for digital input and monitor its changes using a callback. \"\"\" # Setup a pin for analog input and monitor its changes DIGITAL_PIN = 12 # arduino pin number IDLE_TIME = .001 # number of seconds for idle loop to sleep # Callback data indices # Callback data indices CB_PIN_MODE = 0 CB_PIN = 1 CB_VALUE = 2 CB_TIME = 3 async def the_callback(data): \"\"\" A callback function to report data changes. This will print the pin number, its reported value and the date and time when the change occurred :param data: [pin, current reported value, pin_mode, timestamp] \"\"\" date = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(data[CB_TIME])) print(f'Pin: {data[CB_PIN]} Value: {data[CB_VALUE]} Time Stamp: {date}') async def digital_in(my_board, pin): \"\"\" This function establishes the pin as a digital input. Any changes on this pin will be reported through the call back function. :param my_board: a pymata_express instance :param pin: Arduino pin number \"\"\" # set the pin mode await my_board.set_pin_mode_digital_input(pin, callback=the_callback) while True: try: await asyncio.sleep(IDLE_TIME) except KeyboardInterrupt: await board.shutdown() sys.exit(0) # get the event loop loop = asyncio.get_event_loop() # instantiate pymata_express board = pymata_express.PymataExpress() try: # start the main function loop.run_until_complete(digital_in(board, 12)) except (KeyboardInterrupt, RuntimeError) as e: loop.run_until_complete(board.shutdown()) sys.exit(0) Sample console output as input change events occur: Pin: 12 Value: 0 Time Stamp: 2020-03-10 13:26:22 Pin: 12 Value: 1 Time Stamp: 2020-03-10 13:26:27 What You Will Find In This Document A discussion of the API methods, including links to working examples. A discussion about the asyncio concurrency model. Installation and system requirements: Verifying The Python 3 Version. Python 3 Installation Instructions. Installing pymata-express . Installing FirmataExpress On Your Arduino. Copyright (C) 2020 Alan Yorinks. All Rights Reserved. Last updated 3 July 2020 For Release v1.18","title":"What Is pymata-express?"},{"location":"#what-is-pymata-express","text":"Pymata-Express is a Python 3 compatible (Version 3.7 or above) Firmata Protocol client. When used in conjunction with an Arduino Firmata sketch, it permits you to control and monitor Arduino hardware remotely over a serial link. Like its conventional sibling pymata4, pymata-express allows you to take advantage of the advanced feature set of the FirmataExpress (recommended) or StandardFirmata Arduino server sketches. However, unlike its conventional sibling, pymata-expresses implements its API utilizing the Python asyncio package .","title":"What is pymata-express?"},{"location":"#pymata-express-major-features","text":"Applications are programmed using the Python 3 asyncio package. Data change events may be associated with a callback function for asynchronous notification, or polling may be used when a synchronous approach is desired. Each data change event is time-stamped and stored. API Reference Documentation is available online. A full set of working examples are available for download online. Supports StandardFirmataWiFi.","title":"Pymata-Express Major Features:"},{"location":"#why-use-asyncio","text":"You may be wondering why you might consider using pymata-express instead of pymata4. Pymata-express tends to execute more quickly than pymata4 and at a lower CPU utilization rate. If you run the stress_test.py examples available in both packages, pymata-express completes the task approximately 10% faster than pymata4 and at a significantly lower CPU utilization rate. That being said, if you are not already familiar with asyncio, you may find the asyncio learning curve is rather steep (but worth it, in my opinion). If you are more comfortable with traditional Python programming, then pymata4 may be the better choice. Both packages have similar APIs, and the set of examples provided in each package parallels the other. Compare examples to get an understanding of the differences No matter which package you pick, since the APIs between the two packages are so similar, converting an application from one API to another should be straight forward.","title":"Why Use Asyncio?"},{"location":"#advantages-of-using-the-firmataexpress-sketch-over-standardfirmata","text":"The data link runs at 115200, twice the speed of StandardFirmata. Advanced Arduino auto-discovery support is provided. Additional hardware support is provided for: HC-SR04 ultrasonic distance sensors. DHT Humidity/Temperature sensors (in collaboration with Martyn Wheeler). Stepper motors. Tone generation for piezo devices.","title":"Advantages of Using The FirmataExpress Sketch Over StandardFirmata:"},{"location":"#an-intuitive-and-easy-to-use-api","text":"For example, to receive asynchronous digital pin state data change notifications, you simply do the following: Set a pin mode for the pin and register a callback function. Have your application sit in a loop waiting for notifications. When pymata-express executes your callback method, the data parameter will contain a list of items that describe the change event, including a time-stamp. Here is an example demonstrating using a callback to monitor the state changes of a digital input pin. import asyncio import time import sys from pymata_express import pymata_express \"\"\" Setup a pin for digital input and monitor its changes using a callback. \"\"\" # Setup a pin for analog input and monitor its changes DIGITAL_PIN = 12 # arduino pin number IDLE_TIME = .001 # number of seconds for idle loop to sleep # Callback data indices # Callback data indices CB_PIN_MODE = 0 CB_PIN = 1 CB_VALUE = 2 CB_TIME = 3 async def the_callback(data): \"\"\" A callback function to report data changes. This will print the pin number, its reported value and the date and time when the change occurred :param data: [pin, current reported value, pin_mode, timestamp] \"\"\" date = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(data[CB_TIME])) print(f'Pin: {data[CB_PIN]} Value: {data[CB_VALUE]} Time Stamp: {date}') async def digital_in(my_board, pin): \"\"\" This function establishes the pin as a digital input. Any changes on this pin will be reported through the call back function. :param my_board: a pymata_express instance :param pin: Arduino pin number \"\"\" # set the pin mode await my_board.set_pin_mode_digital_input(pin, callback=the_callback) while True: try: await asyncio.sleep(IDLE_TIME) except KeyboardInterrupt: await board.shutdown() sys.exit(0) # get the event loop loop = asyncio.get_event_loop() # instantiate pymata_express board = pymata_express.PymataExpress() try: # start the main function loop.run_until_complete(digital_in(board, 12)) except (KeyboardInterrupt, RuntimeError) as e: loop.run_until_complete(board.shutdown()) sys.exit(0) Sample console output as input change events occur: Pin: 12 Value: 0 Time Stamp: 2020-03-10 13:26:22 Pin: 12 Value: 1 Time Stamp: 2020-03-10 13:26:27","title":"An Intuitive And Easy To use API"},{"location":"#what-you-will-find-in-this-document","text":"A discussion of the API methods, including links to working examples. A discussion about the asyncio concurrency model. Installation and system requirements: Verifying The Python 3 Version. Python 3 Installation Instructions. Installing pymata-express . Installing FirmataExpress On Your Arduino. Copyright (C) 2020 Alan Yorinks. All Rights Reserved. Last updated 3 July 2020 For Release v1.18","title":"What You Will Find In This Document"},{"location":"about/","text":"REPORTING ISSUES If you wish to report an issue with pymata-express, please use this link . For FirmataExpress, please use this link . When filing an issue, please provide any console output, a description of the issue, and sample code demonstrating the problem. If you have any questions about Pymata Express or FirmataExpress, you may also use the issues links to do that as well. TROUBLESHOOTING TIPS Powering both Arduino connected devices (such as motors) and the Arduino micro-controller from your computer's USB connector may exceed the maximum current capabilities of the USB port. In those cases, use a separate power supply for the connected device. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"About"},{"location":"about/#reporting-issues","text":"If you wish to report an issue with pymata-express, please use this link . For FirmataExpress, please use this link . When filing an issue, please provide any console output, a description of the issue, and sample code demonstrating the problem. If you have any questions about Pymata Express or FirmataExpress, you may also use the issues links to do that as well.","title":"REPORTING ISSUES"},{"location":"about/#troubleshooting-tips","text":"Powering both Arduino connected devices (such as motors) and the Arduino micro-controller from your computer's USB connector may exceed the maximum current capabilities of the USB port. In those cases, use a separate power supply for the connected device. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"TROUBLESHOOTING TIPS"},{"location":"api/","text":"The full API Documentation can be viewed by clicking here. To open the API in a new browser window or tab, right-click and make your selection. Copyright (C) 2019-2020 Alan Yorinks. All Rights Reserved.","title":"The full API Documentation can be viewed by clicking [here.](https://htmlpreview.github.io/?https://github.com/MrYsLab/pymata-express/blob/master/documentation/api/pymata_express.html)"},{"location":"api/#the-full-api-documentation-can-be-viewed-by-clicking-here","text":"To open the API in a new browser window or tab, right-click and make your selection. Copyright (C) 2019-2020 Alan Yorinks. All Rights Reserved.","title":"The full API Documentation can be viewed by clicking here."},{"location":"concurrency/","text":"The Concurrency Model Introduction To support its concurrency needs. pymata-express divides its workload into asyncio tasks. According to Wikipedia, \"concurrency is the ability of different parts or units of a program, algorithm, or problem to be executed out-of-order or in partial order, without affecting the final outcome. This allows for parallel execution of the concurrent units, which can significantly improve overall speed of the execution in multi-processor and multi-core systems.\" Pymata-express consists of two main tasks: Accept and process API calls from the application. Translate the API calls into Firmata formatted messages. Transmit these messages across the serial link. Continuously receive data from the serial link while assuring no data loss. Decode the received data. Store information in the pymata-express internal data structures. Notify the application of data change notifications by calling the user-provided callback methods. If you invoke the keep-alive feature, a third task continuously sends keep-alive messages to the Arduino. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"The pymata-express Concurrency Model"},{"location":"concurrency/#the-concurrency-model","text":"","title":"The Concurrency Model"},{"location":"concurrency/#introduction","text":"To support its concurrency needs. pymata-express divides its workload into asyncio tasks. According to Wikipedia, \"concurrency is the ability of different parts or units of a program, algorithm, or problem to be executed out-of-order or in partial order, without affecting the final outcome. This allows for parallel execution of the concurrent units, which can significantly improve overall speed of the execution in multi-processor and multi-core systems.\" Pymata-express consists of two main tasks: Accept and process API calls from the application. Translate the API calls into Firmata formatted messages. Transmit these messages across the serial link. Continuously receive data from the serial link while assuring no data loss. Decode the received data. Store information in the pymata-express internal data structures. Notify the application of data change notifications by calling the user-provided callback methods. If you invoke the keep-alive feature, a third task continuously sends keep-alive messages to the Arduino. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Introduction"},{"location":"device_writes/","text":"Setting Pin and Device Values In this section, we discuss writing data to: Digital pins. PWM pins. Piezo tone devices. Servo motors. Stepper motors. Note: I2C devices are discussed in the next section of this guide. analog_write async def analog_write(self, pin, value) This is an alias for PWM_write It may be removed in the future. Set the selected pin to the specified value. :param pin: Analog output pin number :param value: Pin value (0 - 0x4000) Example: pwm_analog_output.py Notes: The value parameter is typically set between 0 and 255. digital_write async def digital_write(self, pin, value) Set the specified pin to the specified value. :param pin: arduino pin number :param value: pin value (1 or 0) Example: digital_output.py pwm_write async def pwm_write(self, pin, value) Set the selected pin to the specified value. :param pin: PWM pin number :param value: Pin value (0 - 0x4000) Example: pwm_analog_output.py Notes: The value parameter is typically set between 0 and 255. play_tone async def play_tone(self, pin_number, frequency, duration) This is FirmataExpress feature Play a tone at the specified frequency for the specified duration. :param pin_number: arduino pin number :param frequency: tone frequency in hz :param duration: duration in milliseconds Example: play_tone.py play_tone_continuously async def play_tone_continuously(self, pin_number, frequency) This is a FirmataExpress feature This method plays a tone continuously until play_tone_off is called. :param pin_number: arduino pin number :param frequency: tone frequency in hz Example: play_tone.py play_tone_off async def play_tone_off(self, pin_number) This is a FirmataExpress Feature This method turns tone off for the specified pin. :param pin_number: arduino pin number Example: play_tone.py servo_write async def servo_write(self, pin, position) This is an alias for pwm_write to set the position of a servo that has been previously configured using set_pin_mode_servo. :param pin: arduino pin number :param position: servo position Example: servo.py Notes: For an angular servo, the position parameter is set between 0 and 180 (degrees). For a continuous servo, 0 is full-speed in one direction, 180 is full speed in the other, and a value near 90 is no movement. stepper_write async def stepper_write(self, motor_speed, number_of_steps) This is a FirmataExpress feature Move a stepper motor for the number of steps at the specified speed. This is a FirmataPlus feature. :param motor_speed: 21 bits of data to set motor speed :param number_of_steps: 14 bits for number of steps & direction positive is forward, negative is reverse Example: stepper.py Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Writing Values To Pins And Selected Devices"},{"location":"device_writes/#setting-pin-and-device-values","text":"In this section, we discuss writing data to: Digital pins. PWM pins. Piezo tone devices. Servo motors. Stepper motors. Note: I2C devices are discussed in the next section of this guide.","title":"Setting Pin and Device Values"},{"location":"device_writes/#analog_write","text":"async def analog_write(self, pin, value) This is an alias for PWM_write It may be removed in the future. Set the selected pin to the specified value. :param pin: Analog output pin number :param value: Pin value (0 - 0x4000) Example: pwm_analog_output.py Notes: The value parameter is typically set between 0 and 255.","title":"analog_write"},{"location":"device_writes/#digital_write","text":"async def digital_write(self, pin, value) Set the specified pin to the specified value. :param pin: arduino pin number :param value: pin value (1 or 0) Example: digital_output.py","title":"digital_write"},{"location":"device_writes/#pwm_write","text":"async def pwm_write(self, pin, value) Set the selected pin to the specified value. :param pin: PWM pin number :param value: Pin value (0 - 0x4000) Example: pwm_analog_output.py Notes: The value parameter is typically set between 0 and 255.","title":"pwm_write"},{"location":"device_writes/#play_tone","text":"async def play_tone(self, pin_number, frequency, duration) This is FirmataExpress feature Play a tone at the specified frequency for the specified duration. :param pin_number: arduino pin number :param frequency: tone frequency in hz :param duration: duration in milliseconds Example: play_tone.py","title":"play_tone"},{"location":"device_writes/#play_tone_continuously","text":"async def play_tone_continuously(self, pin_number, frequency) This is a FirmataExpress feature This method plays a tone continuously until play_tone_off is called. :param pin_number: arduino pin number :param frequency: tone frequency in hz Example: play_tone.py","title":"play_tone_continuously"},{"location":"device_writes/#play_tone_off","text":"async def play_tone_off(self, pin_number) This is a FirmataExpress Feature This method turns tone off for the specified pin. :param pin_number: arduino pin number Example: play_tone.py","title":"play_tone_off"},{"location":"device_writes/#servo_write","text":"async def servo_write(self, pin, position) This is an alias for pwm_write to set the position of a servo that has been previously configured using set_pin_mode_servo. :param pin: arduino pin number :param position: servo position Example: servo.py Notes: For an angular servo, the position parameter is set between 0 and 180 (degrees). For a continuous servo, 0 is full-speed in one direction, 180 is full speed in the other, and a value near 90 is no movement.","title":"servo_write"},{"location":"device_writes/#stepper_write","text":"async def stepper_write(self, motor_speed, number_of_steps) This is a FirmataExpress feature Move a stepper motor for the number of steps at the specified speed. This is a FirmataPlus feature. :param motor_speed: 21 bits of data to set motor speed :param number_of_steps: 14 bits for number of steps & direction positive is forward, negative is reverse Example: stepper.py Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"stepper_write"},{"location":"enable_disable/","text":"Analog and Digital Input Pin Reporting Callback reporting begins immediately upon setting a pin as either a digital or analog input pin. If your application should unexpectedly exit without an orderly shutdown, the Arduino may continue to stream data, even though your application has exited. In this scenario, if you do not re-power the Arduino before restarting your application, the continuing data stream may cause pymata-express to fail. The data stream is out of sync with the pymata-express's state, causing the failure. One way of making sure that you do not encounter this scenario is to turn off reporting before exiting your application. disable_analog_reporting async def disable_analog_reporting(self, pin) Disables analog reporting for a single analog pin. :param pin: Analog pin number. For example for A0, the number is 0. Example: disable_enable_analog_reporting.py Notes: This method resets the pin mode for the specified pin to a digital input mode. enable_analog_reporting async def enable_analog_reporting(self, pin, callback=None, differential=1) Enables analog reporting. This is an alias for set_pin_mode_analog :param pin: Analog pin number. For example for A0, the number is 0. :param callback: async callback function :param differential: This value needs to be met for a callback to be invoked. Example: disable_enable_analog_reporting.py disable_digital_reporting async def disable_digital_reporting(self, pin) Disables digital reporting. By turning reporting off for this pin, Reporting is disabled for all 8 bits in the \"port\" :param pin: Pin and all pins for this port Example: disable_enable_digital_reporting.py enable_digital_reporting async def enable_digital_reporting(self, pin) Enables digital reporting. By turning reporting on for all 8 bits in the \"port\" - this is part of Firmata's protocol specification. :param pin: Pin and all pins for this port Example: disable_enable_digital_reporting.py Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Enabling/Disabling Analog And Digital Reporting"},{"location":"enable_disable/#analog-and-digital-input-pin-reporting","text":"Callback reporting begins immediately upon setting a pin as either a digital or analog input pin. If your application should unexpectedly exit without an orderly shutdown, the Arduino may continue to stream data, even though your application has exited. In this scenario, if you do not re-power the Arduino before restarting your application, the continuing data stream may cause pymata-express to fail. The data stream is out of sync with the pymata-express's state, causing the failure. One way of making sure that you do not encounter this scenario is to turn off reporting before exiting your application.","title":"Analog and Digital Input Pin  Reporting"},{"location":"enable_disable/#disable_analog_reporting","text":"async def disable_analog_reporting(self, pin) Disables analog reporting for a single analog pin. :param pin: Analog pin number. For example for A0, the number is 0. Example: disable_enable_analog_reporting.py Notes: This method resets the pin mode for the specified pin to a digital input mode.","title":"disable_analog_reporting"},{"location":"enable_disable/#enable_analog_reporting","text":"async def enable_analog_reporting(self, pin, callback=None, differential=1) Enables analog reporting. This is an alias for set_pin_mode_analog :param pin: Analog pin number. For example for A0, the number is 0. :param callback: async callback function :param differential: This value needs to be met for a callback to be invoked. Example: disable_enable_analog_reporting.py","title":"enable_analog_reporting"},{"location":"enable_disable/#disable_digital_reporting","text":"async def disable_digital_reporting(self, pin) Disables digital reporting. By turning reporting off for this pin, Reporting is disabled for all 8 bits in the \"port\" :param pin: Pin and all pins for this port Example: disable_enable_digital_reporting.py","title":"disable_digital_reporting"},{"location":"enable_disable/#enable_digital_reporting","text":"async def enable_digital_reporting(self, pin) Enables digital reporting. By turning reporting on for all 8 bits in the \"port\" - this is part of Firmata's protocol specification. :param pin: Pin and all pins for this port Example: disable_enable_digital_reporting.py Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"enable_digital_reporting"},{"location":"examples/","text":"A WORD ABOUT UNIT TESTS You may have noticed that this distribution does not come with a set of unit tests. The reason for this is simple. To truly test the Pymata Express library requires that hardware devices be connected to the Arduino, and interaction of Pymata Express with these devices needs to be physically observed. Therefore, in place of the traditional unit tests, the examples provided with the distribution act as unit tests. They interact with the hardware, and the results of this interaction may be easily observed and verified. If changes need to be made to the library, the example programs will be re-run to ensure that the hardware and the library behave as expected. If additional features are required in the future, additional examples will be provided to test those new features. EXAMPLE APPLICATIONS analog_input analog_output concurrent_tasks digital_input digital_input_pullup digital_output digital_pin_ouput hc-sr04_distance_sensor i2c_adxl345_accelerometer play_tone retrieve_analog_map retrieve_capability_report retrieve_firmware_version retrieve_pin_state retrieve_protocol_version servo stepper Copyright (C) 2019-2020 Alan Yorinks. All Rights Reserved.","title":"A WORD ABOUT UNIT TESTS"},{"location":"examples/#a-word-about-unit-tests","text":"You may have noticed that this distribution does not come with a set of unit tests. The reason for this is simple. To truly test the Pymata Express library requires that hardware devices be connected to the Arduino, and interaction of Pymata Express with these devices needs to be physically observed. Therefore, in place of the traditional unit tests, the examples provided with the distribution act as unit tests. They interact with the hardware, and the results of this interaction may be easily observed and verified. If changes need to be made to the library, the example programs will be re-run to ensure that the hardware and the library behave as expected. If additional features are required in the future, additional examples will be provided to test those new features.","title":"A WORD ABOUT UNIT TESTS"},{"location":"examples/#example-applications","text":"","title":"EXAMPLE APPLICATIONS"},{"location":"examples/#analog_input","text":"","title":"analog_input"},{"location":"examples/#analog_output","text":"","title":"analog_output"},{"location":"examples/#concurrent_tasks","text":"","title":"concurrent_tasks"},{"location":"examples/#digital_input","text":"","title":"digital_input"},{"location":"examples/#digital_input_pullup","text":"","title":"digital_input_pullup"},{"location":"examples/#digital_output","text":"","title":"digital_output"},{"location":"examples/#digital_pin_ouput","text":"","title":"digital_pin_ouput"},{"location":"examples/#hc-sr04_distance_sensor","text":"","title":"hc-sr04_distance_sensor"},{"location":"examples/#i2c_adxl345_accelerometer","text":"","title":"i2c_adxl345_accelerometer"},{"location":"examples/#play_tone","text":"","title":"play_tone"},{"location":"examples/#retrieve_analog_map","text":"","title":"retrieve_analog_map"},{"location":"examples/#retrieve_capability_report","text":"","title":"retrieve_capability_report"},{"location":"examples/#retrieve_firmware_version","text":"","title":"retrieve_firmware_version"},{"location":"examples/#retrieve_pin_state","text":"","title":"retrieve_pin_state"},{"location":"examples/#retrieve_protocol_version","text":"","title":"retrieve_protocol_version"},{"location":"examples/#servo","text":"","title":"servo"},{"location":"examples/#stepper","text":"Copyright (C) 2019-2020 Alan Yorinks. All Rights Reserved.","title":"stepper"},{"location":"exceptions/","text":"Exceptions When pymata-express detects an error, it raises a RuntimeError exception. The table below shows the exception report string that is displayed on the console when an exception is raised. A probable cause and troubleshooting tip is also provided. Exception Report Probable Cause Troubleshooting ERROR: Python 3.7 or greater is required for use of this program. Unsupported version of python detected Make sure that you are using Python 3.7 or greater. No Arduino Found or User Aborted Program. Com Port not found. Make sure that you have the Arduino plugged in. Firmata Sketch Firmware Version Not Found. Valid firmware version not returned. Make sure that you have a Firmata sketch installed on the Arduino. Analog map retrieval timed out. Do you have Arduino connectivity and do you have the correct Firmata sketch uploaded to the board? Analog report request timed out Self explanatory. User Hit Control-C. User aborted the application. Not Applicable. Retrieving ID From Arduino Failed. FirmataExpress handshake not returned. Make sure that FirmataExpress was uploaded to the Arduino Invalid Arduino identifier retrieved FirmataExpress and pymata-express Arduino IDs do not match. Verify the Arduino IDs write fail in _send_command Serial write failed. Check the serial cable. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Exceptions"},{"location":"exceptions/#exceptions","text":"When pymata-express detects an error, it raises a RuntimeError exception. The table below shows the exception report string that is displayed on the console when an exception is raised. A probable cause and troubleshooting tip is also provided. Exception Report Probable Cause Troubleshooting ERROR: Python 3.7 or greater is required for use of this program. Unsupported version of python detected Make sure that you are using Python 3.7 or greater. No Arduino Found or User Aborted Program. Com Port not found. Make sure that you have the Arduino plugged in. Firmata Sketch Firmware Version Not Found. Valid firmware version not returned. Make sure that you have a Firmata sketch installed on the Arduino. Analog map retrieval timed out. Do you have Arduino connectivity and do you have the correct Firmata sketch uploaded to the board? Analog report request timed out Self explanatory. User Hit Control-C. User aborted the application. Not Applicable. Retrieving ID From Arduino Failed. FirmataExpress handshake not returned. Make sure that FirmataExpress was uploaded to the Arduino Invalid Arduino identifier retrieved FirmataExpress and pymata-express Arduino IDs do not match. Verify the Arduino IDs write fail in _send_command Serial write failed. Check the serial cable. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Exceptions"},{"location":"firmata_express/","text":"FirmataExpress Installation Instructions 1. Open the Arduino IDE and select Tools/Manage Libraries. 2. Enter \"FirmataExpress in the search box. 3. Click on the Install button. 4. FirmataExpress also requires that the Ultrasonic library by Erick Sim\u00f5es be installed. Using the Arduino IDE, install the ultrasonic library . Click on Tools/Manage Libraries and select Ultrasonic and then click Install. When pymata-express is instantiated, the version of FirmataExpress is checked for compatibility. If an incompatible version is found, a RuntimeError exception will be raised. The correct version to be used is identified and printed on the console. Setting The FirmataExpress Instance ID FirmataExpress, in conjunction with pymata-express, can automatically associate a Pymata Express application with a specific Arduino board plugged into your computer. If you only have a single Arduino connected at a time, you do not need to do anything. However, if you wish to run multiple Arduinos, you will need to assign a unique ID number to each Arduino. The ID number is then supplied as an input parameter when your application is instantiated. The Pymata Express instance parameter is discussed here . To set the ID number in FirmataExpress, load the FirmataExpress sketch into the Arduino IDE Look for the following line: #define ARDUINO_INSTANCE_ID 1 Modify the value of 1 to the matching number you will use with Pymata Express. You may then compile and upload FirmataExpress to your Arduino. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Installing FirmataExpress"},{"location":"firmata_express/#firmataexpress","text":"","title":"FirmataExpress"},{"location":"firmata_express/#installation-instructions","text":"1. Open the Arduino IDE and select Tools/Manage Libraries. 2. Enter \"FirmataExpress in the search box. 3. Click on the Install button. 4. FirmataExpress also requires that the Ultrasonic library by Erick Sim\u00f5es be installed. Using the Arduino IDE, install the ultrasonic library . Click on Tools/Manage Libraries and select Ultrasonic and then click Install. When pymata-express is instantiated, the version of FirmataExpress is checked for compatibility. If an incompatible version is found, a RuntimeError exception will be raised. The correct version to be used is identified and printed on the console.","title":"Installation Instructions"},{"location":"firmata_express/#setting-the-firmataexpress-instance-id","text":"FirmataExpress, in conjunction with pymata-express, can automatically associate a Pymata Express application with a specific Arduino board plugged into your computer. If you only have a single Arduino connected at a time, you do not need to do anything. However, if you wish to run multiple Arduinos, you will need to assign a unique ID number to each Arduino. The ID number is then supplied as an input parameter when your application is instantiated. The Pymata Express instance parameter is discussed here . To set the ID number in FirmataExpress, load the FirmataExpress sketch into the Arduino IDE Look for the following line: #define ARDUINO_INSTANCE_ID 1 Modify the value of 1 to the matching number you will use with Pymata Express. You may then compile and upload FirmataExpress to your Arduino. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Setting The FirmataExpress Instance ID"},{"location":"guidelines/","text":"THE PYMATA EXPRESS CLASS PARAMETERS In most cases, when you create an instance of the PymataExpress class, you can accept the default parameters offered in its __init__ method. However, it is essential to understand what those parameters do so that you can customize the behavior of the class to fit your needs best. To aid in this discussion, here is the signature for the PymataExpress class: class PymataExpress: \"\"\" This class exposes and implements the PymataExpress API. It includes the public API methods as well as a set of private methods. This is an asyncio API \"\"\" # noinspection PyPep8 def __init__(self, com_port=None, baud_rate=115200, arduino_instance_id=1, arduino_wait=4, sleep_tune=0.0001, autostart=True, loop=None, shutdown_on_exception=True): PARAMETERS: com_port and baud_rate These 2 parameters are used in tandem to specify how Pymata Express performs serial port connectivity and Arduino auto-discovery. Accepting The Default Values By accepting the defaults, PymataExpress attempts to perform its auto-discovery procedures to locate and connect to the Arduino using FirmataExpress features. Specifying The Com Port Explicitly With A Baud Rate of 115200 This configuration assumes that the FirmataExpress sketch has been uploaded to the Arduino. Auto-discovery is bypassed; however, the arduino_instance_id value is still validated to match the value specified in the FirmataExpress sketch. See the arudino_instance_id discussion below. If the instance-id match is successful, the connection succeeds. If not, a RuntimeError exception is raised. Using Firmata Sketches That Run At 57600 When using these sketches, you must specify both com_port and baud rate explicitly. No auto-discovery is performed, and a connection will be attempted using the values specified. PARAMETER: arduino_instance_id If the baud rate is set to 115200, it is assumed that FirmataExpress has been uploaded to the Arduino. To verify that there is a working connection to the Arduino, Pymata Express sends a query message to the Arduino. The Arduino, in turn, returns its \"ARDUINO INSTANCE\" id number. Pymata Express compares the 2 values, and if they match, instantiation proceeds. If you change the value of this parameter from its default of a value of 1, you must also modify the FirmataPlus sketch to provide a matching value. You may find the instructions to set the instance-id here . If the baud rate is set to a value other than 115200, this parameter is ignored. PARAMETER: arduino_wait This parameter is the amount of time allowed for an Arduino and the uploaded Firmata sketch to complete its reset cycle. Adjust this parameter to a higher value if you experience connection problems with the Arduino. Before doing so, make sure that the serial USB cable is connected correctly and that the com_port and baud_rate are correctly specified. PARAMETER: sleep_tune In general, you should not adjust this value. The purpose of sleep_tune is to set a very short asyncio.sleep time to allow critical portions of Pymata Express to pass control back to the event loop. PARAMETER: autostart When set to True (the default), the __init__ method calls the start() method automatically. The start() method is responsible for: establishing a serial connection to the Arduino. performing pin discovery to determine the total number of digital and analog pins supported by the connected Arduino device. starting a task to accept serial reporting data from the Arduino. If you set this parameter to False, it allows you to determine when the functionality listed in the previous paragraph begins. The start() method is a non-asyncio method. If you require an asyncio method, the start-aio() method performs the same functionality as start(). PARAMETER: loop If you wish to provide an asyncio event loop of your own, you may specify it using this parameter. PARAMETER: shutdown_on_exception By accepting the default of True, when Pymata Express raises a RunTimeError exception, the shutdown() method is called. The shutdown() method stops the asyncio event loop, disables all Arduino port reporting, and closes the serial port. If you prefer to handle the RunTimeError exceptions totally within your application, set this parameter to False. SOME APPLICATION GUIDELINES Before examining a few of the examples in detail, let's look at some coding guidelines you may wish to employ. CALLBACKS VERSUS POLLING Callbacks The Arduino reports data changes to PymataExpress asynchronously as they occur. For your application to receive data change notifications from the Arduino, it must provide a callback function or method. This method is specified when you set the pin mode for an input type pin. The callback function or method you create must be of async type and must provide a data parameter. async def the_callback(data): \"\"\" A callback function to report data changes. :param data: [pin, current reported value, pin_mode, timestamp] \"\"\" # YOUR PROCESSING CODE GOES HERE The callback data parameter consists of a list of 4 items: The PIN number The reported VALUE change for that pin The MODE of that pin A TIMESTAMP when the change occurred. Here is the callback used in the digital_input example : async def the_callback(data): \"\"\" A callback function to report data changes. This will print the pin number, its reported value and the date and time when the change occurred :param data: [pin, current reported value, pin_mode, timestamp] \"\"\" date = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(data[3])) print('Pin: {} Value: {} Time Stamp: {}'.format(data[0], data[1], date)) Here is a sample of the output of this callback function: Pin: 12 Value: 1 Time Stamp: 2019-01-12 10:30:23 When the value change notification is sent from the Arduino, this function will print the pin number, value change, and the time that the change occurred in a human readable format. You may have one or more callback functions defined to handle the callbacks. If you need to determine the pin mode in your callback function or method, here is a list of mode types: INPUT = 0x00 # pin set as input OUTPUT = 0x01 # pin set as output ANALOG = 0x02 # analog pin in analogInput mode PWM = 0x03 # digital pin in PWM output mode SERVO = 0x04 # digital pin in Servo output mode I2C = 0x06 # pin included in I2C setup STEPPER = 0x08 # any pin in stepper mode PULLUP = 0x0b # Any pin in pull-up mode SONAR = 0x0c # Any pin in SONAR mode TONE = 0x0d # Any pin in tone mode Polling Using a callback is the preferred method of receiving Arduino reporting data; however, you may optionally poll for data changes as well. Each time a data change is reported for an input pin, the pin, value, mode, and timestamp are stored internally within PymataExpress. You may retrieve those values at any time using one of the read methods: analog_read digital_read digital_pin_read i2c_read_saved_data sonar_read You may utilize both callbacks and polling within the same application. Here is an example of utilizing a read method for digital_read. EXAMINING SOME OF THE EXAMPLES To illustrate different approaches that commonly used in coding Pymata Express applications, let's explore a few of the examples provided with the distribution. Before we look at the examples, let's discuss a generalized coding template that is used by all of the examples. An Application Coding Template import asyncio import sys from pymata_express.pymata_express import PymataExpress # YOUR APPLICATION GOES HERE # get the event loop loop = asyncio.get_event_loop() # instantiate pymata_express board = PymataExpress() try: # start the main function of your application loop.run_until_complete(YOUR_APPLICATION) except (KeyboardInterrupt, RuntimeError): loop.run_until_complete(board.shutdown()) sys.exit(0) The template above provides a good starting point when developing a Pymata Express application. It begins by importing both asyncio and the PymataExpress class. The template imports sys as well, so that sys.exit(0) can be called when either the program finishes or the user presses a Control-C. This is shown at the bottom of the template. Your application code follows the imports. Illustrations of this are covered in the examples below. Next, the current running asyncio event loop is retrieved: loop = asyncio.get_event_loop() The loop is used both to start the application loop.run_until_complete(YOUR_APPLICATION) and to cleanly shut the application down. loop.run_until_complete(board.shutdown()) PymataExpress is then instantiated: board = PymataExpress() If you are using an asyncio function or method as your program's starting point, the function or method is wrapped in the asyncio method run_until_complete . loop.run_until_complete(YOUR_APPLICATION) Finally, an exception handler is provided to cleanly shutdown the program if an exception should be thrown. except (KeyboardInterrupt, RuntimeError): loop.run_until_complete(board.shutdown()) sys.exit(0) A Word About Calling shutdown() It is considered good practice to call shutdown when exiting your application. Shutdown not only gracefully closes the asyncio event loop and serial port but also disables all reporting from the Arduino. If you have a set a pin mode to one of the input modes, the Arduino continues to supply pin data changes even after your program is halted. If reports are not disabled, and you restart your application, reporting data from the previous run may still be streaming. The unexpected data may result in an exception to be thrown. Explicitly calling shutdown prevents this from happening. A Word Of Caution About Using The asyncio.run() Method Python 3.7 provides a new way of starting an asyncio program using the asyncio.run() method. import asyncio async def main(): print('Hello ...') await asyncio.sleep(1) print('... World!') # Python 3.7+ asyncio.run(main()) When using PymataExpress, you probably should not use this construct. Here is why. If you look at the documentation for this method , it explicitly states: This function cannot be called when another asyncio event loop is running in the same thread. When you instantiate the PymataExpress class, an event loop will be running \u2014 using the the asyncio.run() method will invoke a second event loop, and your program most likely will not run properly. So what is the proper way to start a PymataExpress application? Let's look at some examples. Calling Pymata Express Async Methods From A Non-Async Function The simplest form of a PymataExpress application calls PymataExpress API methods directly from the main application file. Since the API methods are asyncio methods, we need to make the call \"asyncio\" compatible from within a non-asyncio main. Let's look at the play_tone.py example to illustrate this. import asyncio import sys from pymata_express.pymata_express import PymataExpress # This is a demonstration of the tone methods # retrieve the event loop loop = asyncio.get_event_loop() # instantiate pymata express board = PymataExpress() try: # set a pin's mode for tone operations loop.run_until_complete(board.set_pin_mode_tone(3)) # specify pin, frequency and duration and play tone loop.run_until_complete(board.play_tone(3, 1000, 500)) loop.run_until_complete(asyncio.sleep(2)) # specify pin and frequency and play continuously loop.run_until_complete(board.play_tone_continuously(3, 2000)) loop.run_until_complete(asyncio.sleep(2)) # specify pin to turn pin off loop.run_until_complete(board.play_tone_off(3)) # clean up loop.run_until_complete(board.shutdown()) except KeyboardInterrupt: loop.run_until_complete(board.shutdown()) sys.exit(0) Here we see an example of using the coding template described above . In addition there are several examples of wrapping the PymataExpress API calls using loop.run_until.complete . This allows us to directly call the PymataExpress async API methods. loop.run_until_complete(board.play_tone(3, 1000, 500)) To use this method, we first needed to get the current event_loop: retrieve the event loop loop = asyncio.get_event_loop() And then use the loop to call run_until_complete: # set a pin's mode for tone operations loop.run_until_complete(board.set_pin_mode_tone(3)) The line above sets pin 3's mode to tone mode . The loop_run_until_complete method schedules the method to be run. When that method completes, the next line of code in the script executes, similar to coding a non-asyncio application. NOTE: If the method you are calling contains a while True: loop, the method never returns. After performing several direct calls to the API, a graceful shutdown of the application is performed. Creating Your Own Asyncio Functions That Call The PymataExpress API Another method of creating a PymataExpress application is to create your own asyncio functions that will call the API methods within themselves. Let's look at the analog_input.py example to illustrate. import asyncio import sys from pymata_express.pymata_express import PymataExpress # Setup a pin for analog input and monitor its changes async def the_callback(data): \"\"\" A callback function to report data changes. :param data: [pin, current reported value, pin_mode, timestamp] \"\"\" print(\"analog callback data: \", data[1]) async def analog_in(my_board, pin): \"\"\" This function establishes the pin as an analog input. Any changes on this pin will be reported through the call back function. Also, the differential parameter is being used. The callback will only be called when there is a difference of 5 or more between the current and last value reported. :param my_board: a pymata_express instance :param pin: Arduino pin number \"\"\" await my_board.set_pin_mode_analog_input(pin, callback=the_callback, differential=5) # run forever waiting for input changes while True: await asyncio.sleep(1) # get the event loop loop = asyncio.get_event_loop() # instantiate pymata_express board = PymataExpress() try: # start the main function loop.run_until_complete(analog_in(board, 2)) except (KeyboardInterrupt, RuntimeError) as e: loop.run_until_complete(board.shutdown()) sys.exit(0) This example sets a pin to analog input mode. It provides a callback function to handle data sent from the Arduino, and an asyncio function called analog_in that forms the main asyncio body of our program. The program begins by retrieving the event loop and then instantiates the PymataExpress class: # get the event loop loop = asyncio.get_event_loop() # instantiate pymata_express board = PymataExpress() Next, it invokes our main asyncio method, analog_in : # start the main function loop.run_until_complete(analog_in(board, 2)) The PymataExpress instance is passed to this function as the first parameter and the pin number we wish to use as the second parameter. Let's look at analog_in : async def analog_in(my_board, pin): \"\"\" This function establishes the pin as an analog input. Any changes on this pin will be reported through the call back function. Also, the differential parameter is being used. The callback will only be called when there is difference of 5 or more between the current and last value reported. :param my_board: a pymata_express instance :param pin: Arduino pin number \"\"\" await my_board.set_pin_mode_analog_input(pin, callback=the_callback, differential=5) # run forever waiting for input changes while True: await asyncio.sleep(1) This method sets the pin mode for the pin we select to be an analog input pin. We pass set_pin_mode_analog_input , a PymataExpress API method, three parameters - the pin number, a callback method, and a differential value. The differential Value Parameter When a pin's mode is set to analog input, the Arduino immediately begins streaming the data value for that pin. It does this continuously whether the value changes or not. We may wish to throttle when the callback function or method is called by comparing the current value sent by the Arduino and the difference between the last and the current values. If the differential threshold value is exceeded, the callback will be invoked. So, for example, let's say we wish only to have the callback function invoked when there is a value difference of 5 between the latest value and the previous one. To do so, we set the differential parameter to 5. If the last value, for example, was 1020, the callback will be invoked if the latest value exceeds either 1015 or 1020. The default differential value is 1, but if you wish to receive all streaming data, set it to 0. The While Loop Notice that this program will run forever until the user exits it by entering a Control-C on the keyboard. The loop sleeps for one second and uses the asyncio.sleep method to do so. NOTE: You must use asyncio.sleep when you wish to call sleep from within an asyncio function or method. Since the loop does not perform any other processing, the sleep time could be set to any value. The program does not wait for a second to receive the next data change. The data change is reported immediately in the callback function. The sleep just keeps the event loop up and running, allowing all other asyncio functions to run. The Callback Function This is a simple asyncio function that simply prints out the latest data value. Creating An Application That Consists Of A Set Of Concurrent Tasks One of the main reasons to use asyncio is to have the ability to build an application requiring concurrency, simply and directly. This is illustrated in the concurrent_tasks.py example. import asyncio from pymata_express.pymata_express import PymataExpress class ConcurrentTasks: \"\"\" This program will run 3 concurrent asyncio tasks: 1. Blink an LED. 2. Blink an additional LED at a different rate than the first 3. Read a potentiometer and set the intensity of a third LED scaled to the potentiometer value \"\"\" def __init__(self, board): \"\"\" Initialize the class :param board: a pymata express instance \"\"\" # get the event loop self.loop = board.get_event_loop() # save the PymataExpress instance self.board = board # establish pin numbers # digital pins self.white_led = 6 self.blue_led = 9 self.green_led = 10 # analog pin self.potentiometer = 2 # continue with init and run using an async method loop.run_until_complete(self.async_init_and_run()) async def potentiometer_change_callback(self, data): \"\"\" Call back to receive potentiometer changes. Scale the reported value between 0 and ~127 to control the green led. :param data: [pin, current reported value, pin_mode, timestamp] \"\"\" scaled_value = data[1] // 4 await self.board.analog_write(self.green_led, scaled_value) async def async_init_and_run(self): \"\"\" Initialize pin modes, create tasks and then run the tasks \"\"\" await self.board.set_pin_mode_digital_output(self.white_led) await self.board.set_pin_mode_digital_output(self.blue_led) await self.board.set_pin_mode_pwm(self.green_led) await self.board.set_pin_mode_analog_input(self.potentiometer, self.potentiometer_change_callback) # Create the 2 additional tasks white_led_task = asyncio.create_task(self.blink_led_1(self.white_led, 1)) blue_led_task = asyncio.create_task(self.blink_led_2(self.blue_led, .5)) # start the 2 tasks await white_led_task await blue_led_task async def blink_led_1(self, pin, sleep): \"\"\" This is run as a task from async_init_and_run :param pin: Arduino Pin Number :param sleep: Blink time \"\"\" toggle = 0 while True: await self.board.digital_pin_write(pin, toggle) await asyncio.sleep(sleep) toggle ^= 1 async def blink_led_2(self, pin, sleep): \"\"\" This is run as a task from async_init_and_run :param pin: Arduino Pin Number :param sleep: Blink time \"\"\" toggle = 0 while True: await self.board.digital_pin_write(pin, toggle) await asyncio.sleep(sleep) toggle ^= 1 # Retrieve the asyncio event loop - used by exception loop = asyncio.get_event_loop() # Instantiate PyMataExpress my_board = PymataExpress() try: # Instantiate this class, passing in the # PymataExpress instance. ConcurrentTasks(my_board) except (KeyboardInterrupt, RuntimeError): # cleanup loop.run_until_complete(my_board.shutdown()) print('goodbye') This is a slightly more complex example in that the program uses a class to house its code. Let's look at it in some detail: As in the previous examples discussed, the coding template is used as a basis. At the top of the file, modules are imported, and the definition of the ConcurrentTasks class is specified. ConcurrentTasks Class class ConcurrentTasks: \"\"\" This program will run 3 concurrent asyncio tasks: 1. Blink an LED. 2. Blink an additional LED at a different rate than the first 3. Read a potentiometer and set the intensity of a third LED scaled to the potentiometer value \"\"\" def __init__(self, board): \"\"\" Initialize the class :param board: a pymata express instance \"\"\" # get the event loop self.loop = board.get_event_loop() # save the PymataExpress instance self.board = board # establish pin numbers # digital pins self.white_led = 6 self.blue_led = 9 self.green_led = 10 # analog pin self.potentiometer = 2 # continue with init and run using an async method loop.run_until_complete(self.async_init_and_run()) async def potentiometer_change_callback(self, data): \"\"\" Call back to receive potentiometer changes. Scale the reported value between 0 and ~127 to control the green led. :param data: [pin, current reported value, pin_mode, timestamp] \"\"\" scaled_value = data[1] // 4 await self.board.analog_write(self.green_led, scaled_value) async def async_init_and_run(self): \"\"\" Initialize pin modes, create tasks and then run the tasks \"\"\" await self.board.set_pin_mode_digital_output(self.white_led) await self.board.set_pin_mode_digital_output(self.blue_led) await self.board.set_pin_mode_pwm(self.green_led) await self.board.set_pin_mode_analog_input(self.potentiometer, self.potentiometer_change_callback) # Create the 2 additional tasks white_led_task = asyncio.create_task(self.blink_led_1(self.white_led, 1)) blue_led_task = asyncio.create_task(self.blink_led_2(self.blue_led, .5)) # start the 2 tasks await white_led_task await blue_led_task async def blink_led_1(self, pin, sleep): \"\"\" This is run as a task from async_init_and_run :param pin: Arduino Pin Number :param sleep: Blink time \"\"\" toggle = 0 while True: await self.board.digital_pin_write(pin, toggle) await asyncio.sleep(sleep) toggle ^= 1 async def blink_led_2(self, pin, sleep): \"\"\" This is run as a task from async_init_and_run :param pin: Arduino Pin Number :param sleep: Blink time \"\"\" toggle = 0 while True: await self.board.digital_pin_write(pin, toggle) await asyncio.sleep(sleep) toggle ^= 1 The 3 concurrent tasks are created and run within the ConcurrentTasks class. These tasks are: 1. Blink an LED. 2. Blink an additional LED at a different rate than the first 3. Read a potentiometer and set the intensity of a third LED scaled to the potentiometer value Each task is implemented as a method within the ConcurrentTasks class. The __init__ Method def __init__(self, board): \"\"\" Initialize the class :param board: a pymata express instance \"\"\" # get the event loop self.loop = board.get_event_loop() # save the PymataExpress instance self.board = board # establish pin numbers # digital pins self.white_led = 6 self.blue_led = 9 self.green_led = 10 # analog pin self.potentiometer = 2 # continue with init and run using an async method loop.run_until_complete(self.async_init_and_run()) This method accepts a PymataExpress instance to be used by the methods within the class. It establishes names for the various pins being used and then starts the program by calling the async_init_and_run method of the class. Because async_init_and_run is an async method, it is wrapped with run_until_complete : loop.run_until_complete(self.async_init_and_run()) A Callback Method The class contains a callback method called potentiometer_change_callback .: async def potentiometer_change_callback(self, data): \"\"\" Call back to receive potentiometer changes. Scale the reported value between 0 and ~127 to control the green led. :param data: [pin, current reported value, pin_mode, timestamp] \"\"\" scaled_value = data[1] // 4 await self.board.analog_write(self.green_led, scaled_value) This method receives the latest changes to the potentiometer values reported by the Arduino. It then scales the reported value to be between 0 and 127 so that it can control the intensity of the green LED. This is one of the 3 concurrent tasks that run simultaneously The Two Additional Task Methods In addition to the callback method, the class contains 2 additional methods that will also be invoked as independent, concurrent tasks. Each of these methods ( blink_led_1 and blink_led_2 ) blink an LED at an independent rate. These 2 tasks will run in tandem with the callback task. The Main Method The main method of this class is named async_init_and_run , and it sets the pin modes for the various pins in addition to setting the callback method for the potentiometer pin. NOTE: When the callback method is passed as a parameter to set_pin_mode_analog_input , only its name is used and not the parentheses. await self.board.set_pin_mode_analog_input(self.potentiometer, self.potentiometer_change_callback) Next, the blink tasks are created. The callback task is considered part of the main task, and so it does not have to be explicitly created and run. The tasks are created using the asyncio create_task task method, and then the tasks are started by awaiting each task. async def async_init_and_run(self): \"\"\" Initialize pin modes, create tasks and then run the tasks \"\"\" await self.board.set_pin_mode_digital_output(self.white_led) await self.board.set_pin_mode_digital_output(self.blue_led) await self.board.set_pin_mode_pwm(self.green_led) await self.board.set_pin_mode_analog_input(self.potentiometer, self.potentiometer_change_callback) # Create the 2 additional tasks white_led_task = asyncio.create_task(self.blink_led_1(self.white_led, 1)) blue_led_task = asyncio.create_task(self.blink_led_2(self.blue_led, .5)) # start the 2 tasks await white_led_task await blue_led_task At the bottom of the file, the event loop is retrieved, and an instance of PymataExpress is created. The ConcurrentTasks class is instantiated, passing it the PymataExpress instance. # Retrieve the asyncio event loop - used by exception loop = asyncio.get_event_loop() # Instantiate PyMataExpress my_board = PymataExpress() try: # Instantiate this class, passing in the # PymataExpress instance. ConcurrentTasks(my_board) except (KeyboardInterrupt, RuntimeError): # cleanup loop.run_until_complete(my_board.shutdown()) print('goodbye') The blink tasks will run forever, and whenever the Arduino sends a data change report for the potentiometer, it will be processed as well. This program runs very efficiently. On a Linux computer running an Intel Core i5-2500K CPU at 3.30GHz, CPU utilization is 5%. Copyright (C) 2019-2020 Alan Yorinks. All Rights Reserved.","title":"THE PYMATA EXPRESS CLASS PARAMETERS"},{"location":"guidelines/#the-pymata-express-class-parameters","text":"In most cases, when you create an instance of the PymataExpress class, you can accept the default parameters offered in its __init__ method. However, it is essential to understand what those parameters do so that you can customize the behavior of the class to fit your needs best. To aid in this discussion, here is the signature for the PymataExpress class: class PymataExpress: \"\"\" This class exposes and implements the PymataExpress API. It includes the public API methods as well as a set of private methods. This is an asyncio API \"\"\" # noinspection PyPep8 def __init__(self, com_port=None, baud_rate=115200, arduino_instance_id=1, arduino_wait=4, sleep_tune=0.0001, autostart=True, loop=None, shutdown_on_exception=True):","title":"THE PYMATA EXPRESS CLASS PARAMETERS"},{"location":"guidelines/#parameters-com_port-and-baud_rate","text":"These 2 parameters are used in tandem to specify how Pymata Express performs serial port connectivity and Arduino auto-discovery.","title":"PARAMETERS: com_port and baud_rate"},{"location":"guidelines/#accepting-the-default-values","text":"By accepting the defaults, PymataExpress attempts to perform its auto-discovery procedures to locate and connect to the Arduino using FirmataExpress features.","title":"Accepting The Default Values"},{"location":"guidelines/#specifying-the-com-port-explicitly-with-a-baud-rate-of-115200","text":"This configuration assumes that the FirmataExpress sketch has been uploaded to the Arduino. Auto-discovery is bypassed; however, the arduino_instance_id value is still validated to match the value specified in the FirmataExpress sketch. See the arudino_instance_id discussion below. If the instance-id match is successful, the connection succeeds. If not, a RuntimeError exception is raised.","title":"Specifying The Com Port Explicitly With A Baud Rate of 115200"},{"location":"guidelines/#using-firmata-sketches-that-run-at-57600","text":"When using these sketches, you must specify both com_port and baud rate explicitly. No auto-discovery is performed, and a connection will be attempted using the values specified.","title":"Using Firmata Sketches That Run At 57600"},{"location":"guidelines/#parameter-arduino_instance_id","text":"If the baud rate is set to 115200, it is assumed that FirmataExpress has been uploaded to the Arduino. To verify that there is a working connection to the Arduino, Pymata Express sends a query message to the Arduino. The Arduino, in turn, returns its \"ARDUINO INSTANCE\" id number. Pymata Express compares the 2 values, and if they match, instantiation proceeds. If you change the value of this parameter from its default of a value of 1, you must also modify the FirmataPlus sketch to provide a matching value. You may find the instructions to set the instance-id here . If the baud rate is set to a value other than 115200, this parameter is ignored.","title":"PARAMETER: arduino_instance_id"},{"location":"guidelines/#parameter-arduino_wait","text":"This parameter is the amount of time allowed for an Arduino and the uploaded Firmata sketch to complete its reset cycle. Adjust this parameter to a higher value if you experience connection problems with the Arduino. Before doing so, make sure that the serial USB cable is connected correctly and that the com_port and baud_rate are correctly specified.","title":"PARAMETER: arduino_wait"},{"location":"guidelines/#parameter-sleep_tune","text":"In general, you should not adjust this value. The purpose of sleep_tune is to set a very short asyncio.sleep time to allow critical portions of Pymata Express to pass control back to the event loop.","title":"PARAMETER: sleep_tune"},{"location":"guidelines/#parameter-autostart","text":"When set to True (the default), the __init__ method calls the start() method automatically. The start() method is responsible for: establishing a serial connection to the Arduino. performing pin discovery to determine the total number of digital and analog pins supported by the connected Arduino device. starting a task to accept serial reporting data from the Arduino. If you set this parameter to False, it allows you to determine when the functionality listed in the previous paragraph begins. The start() method is a non-asyncio method. If you require an asyncio method, the start-aio() method performs the same functionality as start().","title":"PARAMETER: autostart"},{"location":"guidelines/#parameter-loop","text":"If you wish to provide an asyncio event loop of your own, you may specify it using this parameter.","title":"PARAMETER: loop"},{"location":"guidelines/#parameter-shutdown_on_exception","text":"By accepting the default of True, when Pymata Express raises a RunTimeError exception, the shutdown() method is called. The shutdown() method stops the asyncio event loop, disables all Arduino port reporting, and closes the serial port. If you prefer to handle the RunTimeError exceptions totally within your application, set this parameter to False.","title":"PARAMETER: shutdown_on_exception"},{"location":"guidelines/#some-application-guidelines","text":"Before examining a few of the examples in detail, let's look at some coding guidelines you may wish to employ.","title":"SOME APPLICATION GUIDELINES"},{"location":"guidelines/#callbacks-versus-polling","text":"","title":"CALLBACKS VERSUS POLLING"},{"location":"guidelines/#callbacks","text":"The Arduino reports data changes to PymataExpress asynchronously as they occur. For your application to receive data change notifications from the Arduino, it must provide a callback function or method. This method is specified when you set the pin mode for an input type pin. The callback function or method you create must be of async type and must provide a data parameter. async def the_callback(data): \"\"\" A callback function to report data changes. :param data: [pin, current reported value, pin_mode, timestamp] \"\"\" # YOUR PROCESSING CODE GOES HERE The callback data parameter consists of a list of 4 items: The PIN number The reported VALUE change for that pin The MODE of that pin A TIMESTAMP when the change occurred. Here is the callback used in the digital_input example : async def the_callback(data): \"\"\" A callback function to report data changes. This will print the pin number, its reported value and the date and time when the change occurred :param data: [pin, current reported value, pin_mode, timestamp] \"\"\" date = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(data[3])) print('Pin: {} Value: {} Time Stamp: {}'.format(data[0], data[1], date)) Here is a sample of the output of this callback function: Pin: 12 Value: 1 Time Stamp: 2019-01-12 10:30:23 When the value change notification is sent from the Arduino, this function will print the pin number, value change, and the time that the change occurred in a human readable format. You may have one or more callback functions defined to handle the callbacks. If you need to determine the pin mode in your callback function or method, here is a list of mode types: INPUT = 0x00 # pin set as input OUTPUT = 0x01 # pin set as output ANALOG = 0x02 # analog pin in analogInput mode PWM = 0x03 # digital pin in PWM output mode SERVO = 0x04 # digital pin in Servo output mode I2C = 0x06 # pin included in I2C setup STEPPER = 0x08 # any pin in stepper mode PULLUP = 0x0b # Any pin in pull-up mode SONAR = 0x0c # Any pin in SONAR mode TONE = 0x0d # Any pin in tone mode","title":"Callbacks"},{"location":"guidelines/#polling","text":"Using a callback is the preferred method of receiving Arduino reporting data; however, you may optionally poll for data changes as well. Each time a data change is reported for an input pin, the pin, value, mode, and timestamp are stored internally within PymataExpress. You may retrieve those values at any time using one of the read methods: analog_read digital_read digital_pin_read i2c_read_saved_data sonar_read You may utilize both callbacks and polling within the same application. Here is an example of utilizing a read method for digital_read.","title":"Polling"},{"location":"guidelines/#examining-some-of-the-examples","text":"To illustrate different approaches that commonly used in coding Pymata Express applications, let's explore a few of the examples provided with the distribution. Before we look at the examples, let's discuss a generalized coding template that is used by all of the examples.","title":"EXAMINING SOME OF THE EXAMPLES"},{"location":"guidelines/#an-application-coding-template","text":"import asyncio import sys from pymata_express.pymata_express import PymataExpress # YOUR APPLICATION GOES HERE # get the event loop loop = asyncio.get_event_loop() # instantiate pymata_express board = PymataExpress() try: # start the main function of your application loop.run_until_complete(YOUR_APPLICATION) except (KeyboardInterrupt, RuntimeError): loop.run_until_complete(board.shutdown()) sys.exit(0) The template above provides a good starting point when developing a Pymata Express application. It begins by importing both asyncio and the PymataExpress class. The template imports sys as well, so that sys.exit(0) can be called when either the program finishes or the user presses a Control-C. This is shown at the bottom of the template. Your application code follows the imports. Illustrations of this are covered in the examples below. Next, the current running asyncio event loop is retrieved: loop = asyncio.get_event_loop() The loop is used both to start the application loop.run_until_complete(YOUR_APPLICATION) and to cleanly shut the application down. loop.run_until_complete(board.shutdown()) PymataExpress is then instantiated: board = PymataExpress() If you are using an asyncio function or method as your program's starting point, the function or method is wrapped in the asyncio method run_until_complete . loop.run_until_complete(YOUR_APPLICATION) Finally, an exception handler is provided to cleanly shutdown the program if an exception should be thrown. except (KeyboardInterrupt, RuntimeError): loop.run_until_complete(board.shutdown()) sys.exit(0)","title":"An Application Coding Template"},{"location":"guidelines/#a-word-about-calling-shutdown","text":"It is considered good practice to call shutdown when exiting your application. Shutdown not only gracefully closes the asyncio event loop and serial port but also disables all reporting from the Arduino. If you have a set a pin mode to one of the input modes, the Arduino continues to supply pin data changes even after your program is halted. If reports are not disabled, and you restart your application, reporting data from the previous run may still be streaming. The unexpected data may result in an exception to be thrown. Explicitly calling shutdown prevents this from happening.","title":"A Word About Calling shutdown()"},{"location":"guidelines/#a-word-of-caution-about-using-the-asynciorun-method","text":"Python 3.7 provides a new way of starting an asyncio program using the asyncio.run() method. import asyncio async def main(): print('Hello ...') await asyncio.sleep(1) print('... World!') # Python 3.7+ asyncio.run(main()) When using PymataExpress, you probably should not use this construct. Here is why. If you look at the documentation for this method , it explicitly states: This function cannot be called when another asyncio event loop is running in the same thread. When you instantiate the PymataExpress class, an event loop will be running \u2014 using the the asyncio.run() method will invoke a second event loop, and your program most likely will not run properly. So what is the proper way to start a PymataExpress application? Let's look at some examples.","title":"A Word Of Caution About Using The asyncio.run() Method"},{"location":"guidelines/#calling-pymata-express-async-methods-from-a-non-async-function","text":"The simplest form of a PymataExpress application calls PymataExpress API methods directly from the main application file. Since the API methods are asyncio methods, we need to make the call \"asyncio\" compatible from within a non-asyncio main. Let's look at the play_tone.py example to illustrate this. import asyncio import sys from pymata_express.pymata_express import PymataExpress # This is a demonstration of the tone methods # retrieve the event loop loop = asyncio.get_event_loop() # instantiate pymata express board = PymataExpress() try: # set a pin's mode for tone operations loop.run_until_complete(board.set_pin_mode_tone(3)) # specify pin, frequency and duration and play tone loop.run_until_complete(board.play_tone(3, 1000, 500)) loop.run_until_complete(asyncio.sleep(2)) # specify pin and frequency and play continuously loop.run_until_complete(board.play_tone_continuously(3, 2000)) loop.run_until_complete(asyncio.sleep(2)) # specify pin to turn pin off loop.run_until_complete(board.play_tone_off(3)) # clean up loop.run_until_complete(board.shutdown()) except KeyboardInterrupt: loop.run_until_complete(board.shutdown()) sys.exit(0) Here we see an example of using the coding template described above . In addition there are several examples of wrapping the PymataExpress API calls using loop.run_until.complete . This allows us to directly call the PymataExpress async API methods. loop.run_until_complete(board.play_tone(3, 1000, 500)) To use this method, we first needed to get the current event_loop: retrieve the event loop loop = asyncio.get_event_loop() And then use the loop to call run_until_complete: # set a pin's mode for tone operations loop.run_until_complete(board.set_pin_mode_tone(3)) The line above sets pin 3's mode to tone mode . The loop_run_until_complete method schedules the method to be run. When that method completes, the next line of code in the script executes, similar to coding a non-asyncio application. NOTE: If the method you are calling contains a while True: loop, the method never returns. After performing several direct calls to the API, a graceful shutdown of the application is performed.","title":"Calling Pymata Express Async Methods From A Non-Async Function"},{"location":"guidelines/#creating-your-own-asyncio-functions-that-call-the-pymataexpress-api","text":"Another method of creating a PymataExpress application is to create your own asyncio functions that will call the API methods within themselves. Let's look at the analog_input.py example to illustrate. import asyncio import sys from pymata_express.pymata_express import PymataExpress # Setup a pin for analog input and monitor its changes async def the_callback(data): \"\"\" A callback function to report data changes. :param data: [pin, current reported value, pin_mode, timestamp] \"\"\" print(\"analog callback data: \", data[1]) async def analog_in(my_board, pin): \"\"\" This function establishes the pin as an analog input. Any changes on this pin will be reported through the call back function. Also, the differential parameter is being used. The callback will only be called when there is a difference of 5 or more between the current and last value reported. :param my_board: a pymata_express instance :param pin: Arduino pin number \"\"\" await my_board.set_pin_mode_analog_input(pin, callback=the_callback, differential=5) # run forever waiting for input changes while True: await asyncio.sleep(1) # get the event loop loop = asyncio.get_event_loop() # instantiate pymata_express board = PymataExpress() try: # start the main function loop.run_until_complete(analog_in(board, 2)) except (KeyboardInterrupt, RuntimeError) as e: loop.run_until_complete(board.shutdown()) sys.exit(0) This example sets a pin to analog input mode. It provides a callback function to handle data sent from the Arduino, and an asyncio function called analog_in that forms the main asyncio body of our program. The program begins by retrieving the event loop and then instantiates the PymataExpress class: # get the event loop loop = asyncio.get_event_loop() # instantiate pymata_express board = PymataExpress() Next, it invokes our main asyncio method, analog_in : # start the main function loop.run_until_complete(analog_in(board, 2)) The PymataExpress instance is passed to this function as the first parameter and the pin number we wish to use as the second parameter. Let's look at analog_in : async def analog_in(my_board, pin): \"\"\" This function establishes the pin as an analog input. Any changes on this pin will be reported through the call back function. Also, the differential parameter is being used. The callback will only be called when there is difference of 5 or more between the current and last value reported. :param my_board: a pymata_express instance :param pin: Arduino pin number \"\"\" await my_board.set_pin_mode_analog_input(pin, callback=the_callback, differential=5) # run forever waiting for input changes while True: await asyncio.sleep(1) This method sets the pin mode for the pin we select to be an analog input pin. We pass set_pin_mode_analog_input , a PymataExpress API method, three parameters - the pin number, a callback method, and a differential value.","title":"Creating Your Own Asyncio Functions That Call The PymataExpress API"},{"location":"guidelines/#the-differential-value-parameter","text":"When a pin's mode is set to analog input, the Arduino immediately begins streaming the data value for that pin. It does this continuously whether the value changes or not. We may wish to throttle when the callback function or method is called by comparing the current value sent by the Arduino and the difference between the last and the current values. If the differential threshold value is exceeded, the callback will be invoked. So, for example, let's say we wish only to have the callback function invoked when there is a value difference of 5 between the latest value and the previous one. To do so, we set the differential parameter to 5. If the last value, for example, was 1020, the callback will be invoked if the latest value exceeds either 1015 or 1020. The default differential value is 1, but if you wish to receive all streaming data, set it to 0.","title":"The differential Value Parameter"},{"location":"guidelines/#the-while-loop","text":"Notice that this program will run forever until the user exits it by entering a Control-C on the keyboard. The loop sleeps for one second and uses the asyncio.sleep method to do so. NOTE: You must use asyncio.sleep when you wish to call sleep from within an asyncio function or method. Since the loop does not perform any other processing, the sleep time could be set to any value. The program does not wait for a second to receive the next data change. The data change is reported immediately in the callback function. The sleep just keeps the event loop up and running, allowing all other asyncio functions to run.","title":"The While Loop"},{"location":"guidelines/#the-callback-function","text":"This is a simple asyncio function that simply prints out the latest data value.","title":"The Callback Function"},{"location":"guidelines/#creating-an-application-that-consists-of-a-set-of-concurrent-tasks","text":"One of the main reasons to use asyncio is to have the ability to build an application requiring concurrency, simply and directly. This is illustrated in the concurrent_tasks.py example. import asyncio from pymata_express.pymata_express import PymataExpress class ConcurrentTasks: \"\"\" This program will run 3 concurrent asyncio tasks: 1. Blink an LED. 2. Blink an additional LED at a different rate than the first 3. Read a potentiometer and set the intensity of a third LED scaled to the potentiometer value \"\"\" def __init__(self, board): \"\"\" Initialize the class :param board: a pymata express instance \"\"\" # get the event loop self.loop = board.get_event_loop() # save the PymataExpress instance self.board = board # establish pin numbers # digital pins self.white_led = 6 self.blue_led = 9 self.green_led = 10 # analog pin self.potentiometer = 2 # continue with init and run using an async method loop.run_until_complete(self.async_init_and_run()) async def potentiometer_change_callback(self, data): \"\"\" Call back to receive potentiometer changes. Scale the reported value between 0 and ~127 to control the green led. :param data: [pin, current reported value, pin_mode, timestamp] \"\"\" scaled_value = data[1] // 4 await self.board.analog_write(self.green_led, scaled_value) async def async_init_and_run(self): \"\"\" Initialize pin modes, create tasks and then run the tasks \"\"\" await self.board.set_pin_mode_digital_output(self.white_led) await self.board.set_pin_mode_digital_output(self.blue_led) await self.board.set_pin_mode_pwm(self.green_led) await self.board.set_pin_mode_analog_input(self.potentiometer, self.potentiometer_change_callback) # Create the 2 additional tasks white_led_task = asyncio.create_task(self.blink_led_1(self.white_led, 1)) blue_led_task = asyncio.create_task(self.blink_led_2(self.blue_led, .5)) # start the 2 tasks await white_led_task await blue_led_task async def blink_led_1(self, pin, sleep): \"\"\" This is run as a task from async_init_and_run :param pin: Arduino Pin Number :param sleep: Blink time \"\"\" toggle = 0 while True: await self.board.digital_pin_write(pin, toggle) await asyncio.sleep(sleep) toggle ^= 1 async def blink_led_2(self, pin, sleep): \"\"\" This is run as a task from async_init_and_run :param pin: Arduino Pin Number :param sleep: Blink time \"\"\" toggle = 0 while True: await self.board.digital_pin_write(pin, toggle) await asyncio.sleep(sleep) toggle ^= 1 # Retrieve the asyncio event loop - used by exception loop = asyncio.get_event_loop() # Instantiate PyMataExpress my_board = PymataExpress() try: # Instantiate this class, passing in the # PymataExpress instance. ConcurrentTasks(my_board) except (KeyboardInterrupt, RuntimeError): # cleanup loop.run_until_complete(my_board.shutdown()) print('goodbye') This is a slightly more complex example in that the program uses a class to house its code. Let's look at it in some detail: As in the previous examples discussed, the coding template is used as a basis. At the top of the file, modules are imported, and the definition of the ConcurrentTasks class is specified.","title":"Creating An Application That Consists Of A Set Of Concurrent Tasks"},{"location":"guidelines/#concurrenttasks-class","text":"class ConcurrentTasks: \"\"\" This program will run 3 concurrent asyncio tasks: 1. Blink an LED. 2. Blink an additional LED at a different rate than the first 3. Read a potentiometer and set the intensity of a third LED scaled to the potentiometer value \"\"\" def __init__(self, board): \"\"\" Initialize the class :param board: a pymata express instance \"\"\" # get the event loop self.loop = board.get_event_loop() # save the PymataExpress instance self.board = board # establish pin numbers # digital pins self.white_led = 6 self.blue_led = 9 self.green_led = 10 # analog pin self.potentiometer = 2 # continue with init and run using an async method loop.run_until_complete(self.async_init_and_run()) async def potentiometer_change_callback(self, data): \"\"\" Call back to receive potentiometer changes. Scale the reported value between 0 and ~127 to control the green led. :param data: [pin, current reported value, pin_mode, timestamp] \"\"\" scaled_value = data[1] // 4 await self.board.analog_write(self.green_led, scaled_value) async def async_init_and_run(self): \"\"\" Initialize pin modes, create tasks and then run the tasks \"\"\" await self.board.set_pin_mode_digital_output(self.white_led) await self.board.set_pin_mode_digital_output(self.blue_led) await self.board.set_pin_mode_pwm(self.green_led) await self.board.set_pin_mode_analog_input(self.potentiometer, self.potentiometer_change_callback) # Create the 2 additional tasks white_led_task = asyncio.create_task(self.blink_led_1(self.white_led, 1)) blue_led_task = asyncio.create_task(self.blink_led_2(self.blue_led, .5)) # start the 2 tasks await white_led_task await blue_led_task async def blink_led_1(self, pin, sleep): \"\"\" This is run as a task from async_init_and_run :param pin: Arduino Pin Number :param sleep: Blink time \"\"\" toggle = 0 while True: await self.board.digital_pin_write(pin, toggle) await asyncio.sleep(sleep) toggle ^= 1 async def blink_led_2(self, pin, sleep): \"\"\" This is run as a task from async_init_and_run :param pin: Arduino Pin Number :param sleep: Blink time \"\"\" toggle = 0 while True: await self.board.digital_pin_write(pin, toggle) await asyncio.sleep(sleep) toggle ^= 1 The 3 concurrent tasks are created and run within the ConcurrentTasks class. These tasks are: 1. Blink an LED. 2. Blink an additional LED at a different rate than the first 3. Read a potentiometer and set the intensity of a third LED scaled to the potentiometer value Each task is implemented as a method within the ConcurrentTasks class.","title":"ConcurrentTasks Class"},{"location":"guidelines/#the-__init__-method","text":"def __init__(self, board): \"\"\" Initialize the class :param board: a pymata express instance \"\"\" # get the event loop self.loop = board.get_event_loop() # save the PymataExpress instance self.board = board # establish pin numbers # digital pins self.white_led = 6 self.blue_led = 9 self.green_led = 10 # analog pin self.potentiometer = 2 # continue with init and run using an async method loop.run_until_complete(self.async_init_and_run()) This method accepts a PymataExpress instance to be used by the methods within the class. It establishes names for the various pins being used and then starts the program by calling the async_init_and_run method of the class. Because async_init_and_run is an async method, it is wrapped with run_until_complete : loop.run_until_complete(self.async_init_and_run())","title":"The __init__ Method"},{"location":"guidelines/#a-callback-method","text":"The class contains a callback method called potentiometer_change_callback .: async def potentiometer_change_callback(self, data): \"\"\" Call back to receive potentiometer changes. Scale the reported value between 0 and ~127 to control the green led. :param data: [pin, current reported value, pin_mode, timestamp] \"\"\" scaled_value = data[1] // 4 await self.board.analog_write(self.green_led, scaled_value) This method receives the latest changes to the potentiometer values reported by the Arduino. It then scales the reported value to be between 0 and 127 so that it can control the intensity of the green LED. This is one of the 3 concurrent tasks that run simultaneously","title":"A Callback Method"},{"location":"guidelines/#the-two-additional-task-methods","text":"In addition to the callback method, the class contains 2 additional methods that will also be invoked as independent, concurrent tasks. Each of these methods ( blink_led_1 and blink_led_2 ) blink an LED at an independent rate. These 2 tasks will run in tandem with the callback task.","title":"The Two Additional Task Methods"},{"location":"guidelines/#the-main-method","text":"The main method of this class is named async_init_and_run , and it sets the pin modes for the various pins in addition to setting the callback method for the potentiometer pin. NOTE: When the callback method is passed as a parameter to set_pin_mode_analog_input , only its name is used and not the parentheses. await self.board.set_pin_mode_analog_input(self.potentiometer, self.potentiometer_change_callback) Next, the blink tasks are created. The callback task is considered part of the main task, and so it does not have to be explicitly created and run. The tasks are created using the asyncio create_task task method, and then the tasks are started by awaiting each task. async def async_init_and_run(self): \"\"\" Initialize pin modes, create tasks and then run the tasks \"\"\" await self.board.set_pin_mode_digital_output(self.white_led) await self.board.set_pin_mode_digital_output(self.blue_led) await self.board.set_pin_mode_pwm(self.green_led) await self.board.set_pin_mode_analog_input(self.potentiometer, self.potentiometer_change_callback) # Create the 2 additional tasks white_led_task = asyncio.create_task(self.blink_led_1(self.white_led, 1)) blue_led_task = asyncio.create_task(self.blink_led_2(self.blue_led, .5)) # start the 2 tasks await white_led_task await blue_led_task At the bottom of the file, the event loop is retrieved, and an instance of PymataExpress is created. The ConcurrentTasks class is instantiated, passing it the PymataExpress instance. # Retrieve the asyncio event loop - used by exception loop = asyncio.get_event_loop() # Instantiate PyMataExpress my_board = PymataExpress() try: # Instantiate this class, passing in the # PymataExpress instance. ConcurrentTasks(my_board) except (KeyboardInterrupt, RuntimeError): # cleanup loop.run_until_complete(my_board.shutdown()) print('goodbye') The blink tasks will run forever, and whenever the Arduino sends a data change report for the potentiometer, it will be processed as well. This program runs very efficiently. On a Linux computer running an Intel Core i5-2500K CPU at 3.30GHz, CPU utilization is 5%. Copyright (C) 2019-2020 Alan Yorinks. All Rights Reserved.","title":"The Main Method"},{"location":"i2c/","text":"Communicating With I2C Devices Pymata-express has the capability to support one or more i2c devices connected to the i2c bus. The API supports several i2c read methods, and a single i2c write method, described below. NOTE 1: If you do not specify a callback for any give read method, to retrieve the latest values, you will need to use the i2c_read_saved_data method. The amount of time it takes an i2c device to reply to an i2c read varies from device to device. Therefore it is simpler to use callbacks. NOTE 2: Refer to this example for the i2c read and write methods. Read Commands i2c_read async def i2c_read(self, address, register, number_of_bytes, callback=None) Read the specified number of bytes from the specified register for the i2c device. :param address: i2c device address :param register: i2c register (or None if no register selection is needed) :param number_of_bytes: number of bytes to be read :param callback: Optional callback function to report i2c data as a result of read command callback returns a data list: [pin_type, i2c_device_address, i2c_read_register, data_bytes returned, time_stamp] The pin_type for i2c = 6 Example: See NOTE 2 above. i2c_read_continuous async def i2c_read_continuous(self, address, register, number_of_bytes, callback=None) Some i2c devices support a continuous streaming data output. This command enables that mode for the device that supports continuous reads. :param address: i2c device address :param register: i2c register (or None if no register selection is needed) :param number_of_bytes: number of bytes to be read :param callback: Optional callback function to report i2c data as a result of read command callback returns a data list: [pin_type, i2c_device_address, i2c_read_register, data_bytes returned, time_stamp] The pin_type for i2c = 6 Example: See NOTE 2 above. i2c_read_restart_transmission async def i2c_read_restart_transmission(self, address, register, number_of_bytes, callback=None) Read the specified number of bytes from the specified register for the i2c device. This restarts the transmission after the read. It is required for some i2c devices such as the MMA8452Q accelerometer. :param address: i2c device address :param register: i2c register (or None if no register selection is needed) :param number_of_bytes: number of bytes to be read :param callback: Optional callback function to report i2c data as a result of read command callback returns a data list: [pin_type, i2c_device_address, i2c_read_register, data_bytes returned, time_stamp] The pin_type for i2c = 6 Example: See NOTE 2 above. i2c_read_saved_data async def i2c_read_saved_data(self, address) This method retrieves cached i2c data to support a polling mode. :param address: I2C device address :returns data: [raw data returned from i2c device, time-stamp] Example: See NOTE 2 above. Write Commmand i2c_write async def i2c_write(self, address, args) Write data to an i2c device. :param address: i2c device address :param args: A variable number of bytes to be sent to the device passed in as a list Example: See NOTE 2 above. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"I2C Reads And Writes"},{"location":"i2c/#communicating-with-i2c-devices","text":"Pymata-express has the capability to support one or more i2c devices connected to the i2c bus. The API supports several i2c read methods, and a single i2c write method, described below. NOTE 1: If you do not specify a callback for any give read method, to retrieve the latest values, you will need to use the i2c_read_saved_data method. The amount of time it takes an i2c device to reply to an i2c read varies from device to device. Therefore it is simpler to use callbacks. NOTE 2: Refer to this example for the i2c read and write methods.","title":"Communicating With I2C Devices"},{"location":"i2c/#read-commands","text":"","title":"Read Commands"},{"location":"i2c/#i2c_read","text":"async def i2c_read(self, address, register, number_of_bytes, callback=None) Read the specified number of bytes from the specified register for the i2c device. :param address: i2c device address :param register: i2c register (or None if no register selection is needed) :param number_of_bytes: number of bytes to be read :param callback: Optional callback function to report i2c data as a result of read command callback returns a data list: [pin_type, i2c_device_address, i2c_read_register, data_bytes returned, time_stamp] The pin_type for i2c = 6 Example: See NOTE 2 above.","title":"i2c_read"},{"location":"i2c/#i2c_read_continuous","text":"async def i2c_read_continuous(self, address, register, number_of_bytes, callback=None) Some i2c devices support a continuous streaming data output. This command enables that mode for the device that supports continuous reads. :param address: i2c device address :param register: i2c register (or None if no register selection is needed) :param number_of_bytes: number of bytes to be read :param callback: Optional callback function to report i2c data as a result of read command callback returns a data list: [pin_type, i2c_device_address, i2c_read_register, data_bytes returned, time_stamp] The pin_type for i2c = 6 Example: See NOTE 2 above.","title":"i2c_read_continuous"},{"location":"i2c/#i2c_read_restart_transmission","text":"async def i2c_read_restart_transmission(self, address, register, number_of_bytes, callback=None) Read the specified number of bytes from the specified register for the i2c device. This restarts the transmission after the read. It is required for some i2c devices such as the MMA8452Q accelerometer. :param address: i2c device address :param register: i2c register (or None if no register selection is needed) :param number_of_bytes: number of bytes to be read :param callback: Optional callback function to report i2c data as a result of read command callback returns a data list: [pin_type, i2c_device_address, i2c_read_register, data_bytes returned, time_stamp] The pin_type for i2c = 6 Example: See NOTE 2 above.","title":"i2c_read_restart_transmission"},{"location":"i2c/#i2c_read_saved_data","text":"async def i2c_read_saved_data(self, address) This method retrieves cached i2c data to support a polling mode. :param address: I2C device address :returns data: [raw data returned from i2c device, time-stamp] Example: See NOTE 2 above.","title":"i2c_read_saved_data"},{"location":"i2c/#write-commmand","text":"","title":"Write Commmand"},{"location":"i2c/#i2c_write","text":"async def i2c_write(self, address, args) Write data to an i2c device. :param address: i2c device address :param args: A variable number of bytes to be sent to the device passed in as a list Example: See NOTE 2 above. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"i2c_write"},{"location":"init/","text":"The PymataExpress Class To use the PymataExpress class, you must first import it: from pymata_express import pymata_express and then instantiate it: board = pymata_express.PymataExpress() The board variable contains a reference to the PymataExpress instance. You use this reference to access the PymataExpress methods of the instance. For example, to cleanly shutdown your PymataExpress application, you might call the shutdown method: board.shutdown() Of course, you can name the instance variable, anything that is meaningful to you. There is nothing magic about the name board . Understanding The PymataExpress __init__ Parameters def __init__(self, com_port=None, baud_rate=115200, arduino_instance_id=1, arduino_wait=4, sleep_tune=0.0001, autostart=True, loop=None, shutdown_on_exception=True, close_loop_on_shutdown=True, ip_address=None, ip_port=None, ): \"\"\" If you are using the Firmata Express Arduino sketch, and have a single Arduino connected to your computer, then you may accept all the default values. If you are using some other Firmata sketch, then you must specify both the com_port and baudrate for as serial connection, or ip_address and ip_port if using StandardFirmataWifi. :param com_port: e.g. COM3 or /dev/ttyACM0. :param baud_rate: Match this to the Firmata sketch in use. :param arduino_instance_id: If you are using the Firmata Express sketch, match this value to that in the sketch. :param arduino_wait: Amount of time to wait for an Arduino to fully reset itself. :param sleep_tune: A tuning parameter (typically not changed by user) :param autostart: If you wish to call the start method within your application, then set this to False. :param loop: optional user provided event loop :param shutdown_on_exception: call shutdown before raising a RunTimeError exception, or receiving a KeyboardInterrupt exception :param close_loop_on_shutdown: stop and close the event loop loop when a shutdown is called or a serial error occurs :param ip_address: When interfacing with StandardFirmataWifi, set the IP address of the device. :param ip_port: When interfacing with StandardFirmataWifi, set the ip port of the device. \"\"\" There are many optional parameters available when you instantiate PymataExpress. If you are using FiramataExpress with a single Arduino, then in most cases, you can accept all of the default parameters provided in the __init__ method. But there are times when you may wish to take advantage of the flexibility provided by the __init__ method parameters, so let's explore the definition and purpose of each parameter: The Auto-Discovery Parameters - com_port, baud_rate, and arduino_instance By accepting the default values for these parameters, pymata-express assumes you have flashed your Arduino with FirmataExpress. com_port The com_port parameter specifies a serial com_port, such as COM4 or '/dev/ttyACM0' used for PC to Arduino communication. If the default value of None is accepted, pymata-express will attempt to find the connected Arduino automatically. baud_rate The default for this parameter is 115200, matching the speed set in the FirmataExpress sketch. If you wish to use StandardFirmata instead of FirmataExpress, you will set the baud_rate to 57600. If you specify the baud_rate and accept the default com_port value, pymata-express attempts to find a connected Arduino. arduino_instance_id This parameter is only valid when using FirmataExpress. This parameter allows pymata-express to connect to an Arduino with a matching ID. This is useful if you have multiple Arduino's plugged into your computer, and you wish to have a specific Arduino selected for connection. StandardFirmata does not have this capability, and auto-discovery connects to the first Arduino it finds. This is not always the desired result. The default value for the arduino_instance_id for both pymata-express and FirmataExpress is 1. Instructions for changing the FirmataExpress value may be found in the Installing FirmataExpress section of this document. arduino_wait This parameter specifies the amount of time that pymata-express assumes it takes for an Arduino to reboot the FirmataExpress (or StandardFirmata) sketch from a power-up or reset. The default is 4 seconds. If the Arduino is not fully booted when com_port auto-discovery begins, auto-discovery will fail. sleep_tune This is an asyncio.sleep value expressed in seconds. It is used to yield the asyncio loop so that other tasks may run without blocking. The default value is 0.000001 seconds. autostart If the default of True is accepted, the class will continue with its initialization. There may be times when you wish to control when that occurs within your application. If set to False, you may use the non-asyncio start() method, or the async version, start_aio() . loop If the default of None is accepted for this parameter, the default system asyncio event loop is used. If you should need to specify your own loop, then this parameter should be set with your custom loop. shutdown_on_exception When this parameter is set to True, the shutdown method is automatically called when an exception is detected. This disables reporting for both digital and analog pins, in addition to closing the serial port. By setting this parameter to False, the Arduino may continue to send data to your application even after restarting it. The default is True and recommended to be used. close_loop_on_shutdown When True (the default) a call to shutdown() will close the event loop. If set to False, then the event loop is left open. ip_address If you are using StandardFirmataWiFi, set this parameter to the IP address of your WiFi connected device. ip_port If you are using StandardFirmataWiFi, set this parameter to the IP port of your WiFi connected device. Examples Each example on GitHub demonstrates instantiating the PymataExpress class. A blink demo is provided for StandardFirmata WiFi connections. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"The __init__ Method"},{"location":"init/#the-pymataexpress-class","text":"To use the PymataExpress class, you must first import it: from pymata_express import pymata_express and then instantiate it: board = pymata_express.PymataExpress() The board variable contains a reference to the PymataExpress instance. You use this reference to access the PymataExpress methods of the instance. For example, to cleanly shutdown your PymataExpress application, you might call the shutdown method: board.shutdown() Of course, you can name the instance variable, anything that is meaningful to you. There is nothing magic about the name board .","title":"The PymataExpress Class"},{"location":"init/#understanding-the-pymataexpress-__init__-parameters","text":"def __init__(self, com_port=None, baud_rate=115200, arduino_instance_id=1, arduino_wait=4, sleep_tune=0.0001, autostart=True, loop=None, shutdown_on_exception=True, close_loop_on_shutdown=True, ip_address=None, ip_port=None, ): \"\"\" If you are using the Firmata Express Arduino sketch, and have a single Arduino connected to your computer, then you may accept all the default values. If you are using some other Firmata sketch, then you must specify both the com_port and baudrate for as serial connection, or ip_address and ip_port if using StandardFirmataWifi. :param com_port: e.g. COM3 or /dev/ttyACM0. :param baud_rate: Match this to the Firmata sketch in use. :param arduino_instance_id: If you are using the Firmata Express sketch, match this value to that in the sketch. :param arduino_wait: Amount of time to wait for an Arduino to fully reset itself. :param sleep_tune: A tuning parameter (typically not changed by user) :param autostart: If you wish to call the start method within your application, then set this to False. :param loop: optional user provided event loop :param shutdown_on_exception: call shutdown before raising a RunTimeError exception, or receiving a KeyboardInterrupt exception :param close_loop_on_shutdown: stop and close the event loop loop when a shutdown is called or a serial error occurs :param ip_address: When interfacing with StandardFirmataWifi, set the IP address of the device. :param ip_port: When interfacing with StandardFirmataWifi, set the ip port of the device. \"\"\" There are many optional parameters available when you instantiate PymataExpress. If you are using FiramataExpress with a single Arduino, then in most cases, you can accept all of the default parameters provided in the __init__ method. But there are times when you may wish to take advantage of the flexibility provided by the __init__ method parameters, so let's explore the definition and purpose of each parameter:","title":"Understanding The PymataExpress __init__ Parameters"},{"location":"init/#the-auto-discovery-parameters-com_port-baud_rate-and-arduino_instance","text":"By accepting the default values for these parameters, pymata-express assumes you have flashed your Arduino with FirmataExpress.","title":"The Auto-Discovery Parameters - com_port, baud_rate, and arduino_instance"},{"location":"init/#com_port","text":"The com_port parameter specifies a serial com_port, such as COM4 or '/dev/ttyACM0' used for PC to Arduino communication. If the default value of None is accepted, pymata-express will attempt to find the connected Arduino automatically.","title":"com_port"},{"location":"init/#baud_rate","text":"The default for this parameter is 115200, matching the speed set in the FirmataExpress sketch. If you wish to use StandardFirmata instead of FirmataExpress, you will set the baud_rate to 57600. If you specify the baud_rate and accept the default com_port value, pymata-express attempts to find a connected Arduino.","title":"baud_rate"},{"location":"init/#arduino_instance_id","text":"This parameter is only valid when using FirmataExpress. This parameter allows pymata-express to connect to an Arduino with a matching ID. This is useful if you have multiple Arduino's plugged into your computer, and you wish to have a specific Arduino selected for connection. StandardFirmata does not have this capability, and auto-discovery connects to the first Arduino it finds. This is not always the desired result. The default value for the arduino_instance_id for both pymata-express and FirmataExpress is 1. Instructions for changing the FirmataExpress value may be found in the Installing FirmataExpress section of this document.","title":"arduino_instance_id"},{"location":"init/#arduino_wait","text":"This parameter specifies the amount of time that pymata-express assumes it takes for an Arduino to reboot the FirmataExpress (or StandardFirmata) sketch from a power-up or reset. The default is 4 seconds. If the Arduino is not fully booted when com_port auto-discovery begins, auto-discovery will fail.","title":"arduino_wait"},{"location":"init/#sleep_tune","text":"This is an asyncio.sleep value expressed in seconds. It is used to yield the asyncio loop so that other tasks may run without blocking. The default value is 0.000001 seconds.","title":"sleep_tune"},{"location":"init/#autostart","text":"If the default of True is accepted, the class will continue with its initialization. There may be times when you wish to control when that occurs within your application. If set to False, you may use the non-asyncio start() method, or the async version, start_aio() .","title":"autostart"},{"location":"init/#loop","text":"If the default of None is accepted for this parameter, the default system asyncio event loop is used. If you should need to specify your own loop, then this parameter should be set with your custom loop.","title":"loop"},{"location":"init/#shutdown_on_exception","text":"When this parameter is set to True, the shutdown method is automatically called when an exception is detected. This disables reporting for both digital and analog pins, in addition to closing the serial port. By setting this parameter to False, the Arduino may continue to send data to your application even after restarting it. The default is True and recommended to be used.","title":"shutdown_on_exception"},{"location":"init/#close_loop_on_shutdown","text":"When True (the default) a call to shutdown() will close the event loop. If set to False, then the event loop is left open.","title":"close_loop_on_shutdown"},{"location":"init/#ip_address","text":"If you are using StandardFirmataWiFi, set this parameter to the IP address of your WiFi connected device.","title":"ip_address"},{"location":"init/#ip_port","text":"If you are using StandardFirmataWiFi, set this parameter to the IP port of your WiFi connected device.","title":"ip_port"},{"location":"init/#examples","text":"Each example on GitHub demonstrates instantiating the PymataExpress class. A blink demo is provided for StandardFirmata WiFi connections. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Examples"},{"location":"install_pymata_express/","text":"BEFORE YOU INSTALL Pymata Express requires Python 3.7 or above. Please see the Verifying/Installing Python 3.7 section of this document to verify or install Python on your computer. INSTALLING PYMATA EXPRESS To install Pymata Express on Linux (including Raspberry Pi) and macOS computers, open a terminal window and type: sudo pip3 install pymata-express For Windows users type: pip install pymata-express You can find the code for pymata-express on GitHub . ACCESSING THE ADVANCED FEATURE SET If you wish to use all the advanced features of Pymata Express, install the FirmataExpress Arduino sketch on your Arduino device. You can find the installation instructions here . Copyright (C) 2019-2020 Alan Yorinks. All Rights Reserved.","title":"Installing pymata-express"},{"location":"install_pymata_express/#before-you-install","text":"Pymata Express requires Python 3.7 or above. Please see the Verifying/Installing Python 3.7 section of this document to verify or install Python on your computer.","title":"BEFORE YOU INSTALL"},{"location":"install_pymata_express/#installing-pymata-express","text":"To install Pymata Express on Linux (including Raspberry Pi) and macOS computers, open a terminal window and type: sudo pip3 install pymata-express For Windows users type: pip install pymata-express You can find the code for pymata-express on GitHub .","title":"INSTALLING PYMATA EXPRESS"},{"location":"install_pymata_express/#accessing-the-advanced-feature-set","text":"If you wish to use all the advanced features of Pymata Express, install the FirmataExpress Arduino sketch on your Arduino device. You can find the installation instructions here . Copyright (C) 2019-2020 Alan Yorinks. All Rights Reserved.","title":"ACCESSING THE ADVANCED FEATURE SET"},{"location":"license/","text":"GNU AFFERO GENERAL PUBLIC LICENSE Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. http://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The GNU Affero General Public License is a free, copyleft license for software and other kinds of works, specifically designed to ensure cooperation with the community in the case of network server software. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, our General Public Licenses are intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. Developers that use our General Public Licenses protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License which gives you legal permission to copy, distribute and/or modify the software. A secondary benefit of defending all users' freedom is that improvements made in alternate versions of the program, if they receive widespread use, become available for other developers to incorporate. Many developers of free software are heartened and encouraged by the resulting cooperation. However, in the case of software used on network servers, this result may fail to come about. The GNU General Public License permits making a modified version and letting the public access it on a server without ever releasing its source code to the public. The GNU Affero General Public License is designed specifically to ensure that, in such cases, the modified source code becomes available to the community. It requires the operator of a network server to provide the source code of the modified version running there to the users of that server. Therefore, public use of a modified version, on a publicly accessible server, gives the public access to the source code of the modified version. An older license, called the Affero General Public License and published by Affero, was designed to accomplish similar goals. This is a different license, not a version of the Affero GPL, but Affero has released a new version of the Affero GPL which permits relicensing under this license. The precise terms and conditions for copying, distribution and modification follow. TERMS AND CONDITIONS Definitions. \"This License\" refers to version 3 of the GNU Affero General Public License. \"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations. To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work. A \"covered work\" means either the unmodified Program or a work based on the Program. To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. Source Code. The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work. A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. Basic Permissions. All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. Protecting Users' Legal Rights From Anti-Circumvention Law. No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. Conveying Verbatim Copies. You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. Conveying Modified Source Versions. You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \"keep intact all notices\". c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. Conveying Non-Source Forms. You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. Additional Terms. \"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. Termination. You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. Acceptance Not Required for Having Copies. You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. Automatic Licensing of Downstream Recipients. Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. Patents. A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\". A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. No Surrender of Others' Freedom. If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. Remote Network Interaction; Use with the GNU General Public License. Notwithstanding any other provision of this License, if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version by providing access to the Corresponding Source from a network server at no charge, through some standard or customary means of facilitating copying of software. This Corresponding Source shall include the Corresponding Source for any work covered by version 3 of the GNU General Public License that is incorporated pursuant to the following paragraph. Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the work with which it is combined will remain governed by version 3 of the GNU General Public License. Revised Versions of this License. The Free Software Foundation may publish revised and/or new versions of the GNU Affero General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU Affero General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU Affero General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU Affero General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. Disclaimer of Warranty. THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. Limitation of Liability. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. Interpretation of Sections 15 and 16. If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see <http://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If your software can interact with users remotely through a computer network, you should also make sure that it provides a way for users to get its source. For example, if your program is a web application, its interface could display a \"Source\" link that leads users to an archive of the code. There are many ways you could offer source, and different solutions will be better for different programs; see section 13 for the specific requirements. You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU AGPL, see http://www.gnu.org/licenses/ .","title":"License"},{"location":"management/","text":"Remote Firmata Management The methods in this section allow your application to perform some Firmata management functions remotely. keep_alive For Arduino's utilizing an ATmega328P processor, this exclusive FirmataExpress feature will reset the Arduino if serial communication is lost between pymata-express and the Arduino. async def keep_alive(self, period=1, margin=0.3) This is a FirmataExpress feature. Periodically send a keep alive message to the Arduino. If the Arduino does not received a keep alive, the Arduino will physically reset itself. Frequency of keep alive transmission is calculated as follows: keep_alive_sent = period - margin :param period: Time period between keepalives. Range is 0-10 seconds. 0 disables the keepalive mechanism. :param margin: Safety margin to assure keepalives are sent before period expires. Range is 0.1 to 0.9 Example: keep_alive.py Notes: When keep_alive is called, it spawns and runs in its own thread. send_reset async def send_reset(self) Send a Sysex reset command to the arduino Examples: All examples call shutdown, which in turn calls send_reset. Notes: This command will reset several Firmata internal data structures. It resets its internal i2c flags to indicate there are no i2c devices present. Digital reporting is turned off. It resets any analog pin that was set to a digital mode back to analog mode. If a pin was configured for tone, the tone is turned off. It clears all servo entries from its servo map. It sets the number of active sonar devices to zero. The shutdown method calls send_reset . shutdown async def shutdown(self) This method attempts an orderly shutdown. If any exceptions are thrown, they are ignored. Examples: All the examples call shutdown. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Management Requests"},{"location":"management/#remote-firmata-management","text":"The methods in this section allow your application to perform some Firmata management functions remotely.","title":"Remote Firmata Management"},{"location":"management/#keep_alive","text":"For Arduino's utilizing an ATmega328P processor, this exclusive FirmataExpress feature will reset the Arduino if serial communication is lost between pymata-express and the Arduino. async def keep_alive(self, period=1, margin=0.3) This is a FirmataExpress feature. Periodically send a keep alive message to the Arduino. If the Arduino does not received a keep alive, the Arduino will physically reset itself. Frequency of keep alive transmission is calculated as follows: keep_alive_sent = period - margin :param period: Time period between keepalives. Range is 0-10 seconds. 0 disables the keepalive mechanism. :param margin: Safety margin to assure keepalives are sent before period expires. Range is 0.1 to 0.9 Example: keep_alive.py Notes: When keep_alive is called, it spawns and runs in its own thread.","title":"keep_alive"},{"location":"management/#send_reset","text":"async def send_reset(self) Send a Sysex reset command to the arduino Examples: All examples call shutdown, which in turn calls send_reset. Notes: This command will reset several Firmata internal data structures. It resets its internal i2c flags to indicate there are no i2c devices present. Digital reporting is turned off. It resets any analog pin that was set to a digital mode back to analog mode. If a pin was configured for tone, the tone is turned off. It clears all servo entries from its servo map. It sets the number of active sonar devices to zero. The shutdown method calls send_reset .","title":"send_reset"},{"location":"management/#shutdown","text":"async def shutdown(self) This method attempts an orderly shutdown. If any exceptions are thrown, they are ignored. Examples: All the examples call shutdown. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"shutdown"},{"location":"pin_changes/","text":"Retrieving The Latest Input Data Values As was mentioned earlier, callbacks are preferred over polling for input data change notifications. That being said, your application may dictate using polling over callbacks. This section describes the API methods to retrieve the latest cached input data values. analog_read async def analog_read(self, pin) Retrieve the last data update for the specified analog pin. :param pin: Analog pin number (ex. A2 is specified as 2) :returns: [last value reported, time-stamp] Examples: analog_input_with_time_stamps.py analog_input_with_time_stamps_oo.py dht_read def dht_read(self, pin): \"\"\" Retrieve the last data update for the specified dht pin. :param pin: digital pin number :return: A list = [humidity, temperature time_stamp] ERROR CODES: If either humidity or temperature value: == -1 Configuration Error == -2 Checksum Error == -3 Timeout Error \"\"\" Examples: dht.py digital_read async def digital_read(self, pin) Retrieve the last data update for the specified digital pin. :param pin: Digital pin number :returns: [last value reported, time-stamp] Examples: digital_input.py digital_input_debounce.py digital_input_pullup.py i2c_read_saved_data async def i2c_read_saved_data(self, address) This method retrieves cached i2c data to support a polling mode. :param address: I2C device address :returns data: [raw data returned from i2c device, time-stamp] Example: i2c_adxl345_accelerometer.py sonar_read async def sonar_read(self, trigger_pin) This is a FirmataExpress feature Retrieve Ping (HC-SR04 type) data. The data is presented as a dictionary. The 'key' is the trigger pin specified in sonar_config() and the 'data' is the current measured distance (in centimeters) for that pin. If there is no data, the value is set to None. :param trigger_pin: key into sonar data map :returns: [last distance, raw time stamp] Example: 1. hc-sr04_distance_sensor.py Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Reading Input Data Via Polling"},{"location":"pin_changes/#retrieving-the-latest-input-data-values","text":"As was mentioned earlier, callbacks are preferred over polling for input data change notifications. That being said, your application may dictate using polling over callbacks. This section describes the API methods to retrieve the latest cached input data values.","title":"Retrieving The Latest Input Data Values"},{"location":"pin_changes/#analog_read","text":"async def analog_read(self, pin) Retrieve the last data update for the specified analog pin. :param pin: Analog pin number (ex. A2 is specified as 2) :returns: [last value reported, time-stamp] Examples: analog_input_with_time_stamps.py analog_input_with_time_stamps_oo.py","title":"analog_read"},{"location":"pin_changes/#dht_read","text":"def dht_read(self, pin): \"\"\" Retrieve the last data update for the specified dht pin. :param pin: digital pin number :return: A list = [humidity, temperature time_stamp] ERROR CODES: If either humidity or temperature value: == -1 Configuration Error == -2 Checksum Error == -3 Timeout Error \"\"\" Examples: dht.py","title":"dht_read"},{"location":"pin_changes/#digital_read","text":"async def digital_read(self, pin) Retrieve the last data update for the specified digital pin. :param pin: Digital pin number :returns: [last value reported, time-stamp] Examples: digital_input.py digital_input_debounce.py digital_input_pullup.py","title":"digital_read"},{"location":"pin_changes/#i2c_read_saved_data","text":"async def i2c_read_saved_data(self, address) This method retrieves cached i2c data to support a polling mode. :param address: I2C device address :returns data: [raw data returned from i2c device, time-stamp] Example: i2c_adxl345_accelerometer.py","title":"i2c_read_saved_data"},{"location":"pin_changes/#sonar_read","text":"async def sonar_read(self, trigger_pin) This is a FirmataExpress feature Retrieve Ping (HC-SR04 type) data. The data is presented as a dictionary. The 'key' is the trigger pin specified in sonar_config() and the 'data' is the current measured distance (in centimeters) for that pin. If there is no data, the value is set to None. :param trigger_pin: key into sonar data map :returns: [last distance, raw time stamp] Example: 1. hc-sr04_distance_sensor.py Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"sonar_read"},{"location":"pin_modes/","text":"Introduction An Arduino pin can be configured to operate in one of several modes. The modes available to any given pin is dependent upon pin type. For example, a digital pin may be configured for input, output, and for some digital pins, PWM output operation. Analog input pins are even more flexible. They may be configured for analog input, digital input, or digital output operation. Mapping Analog Pin Numbers To Digital Pin Numbers When configuring an analog input pin as a digital input, you must use the pin's digital pin number equivalent. For example, on an Arduino Uno, if you wish to use pin A0 as a digital pin, the digital pin number equivalent is 14. In general, to find the digital equivalent of pin A0 for your specific Arduino board type, the algorithm is: digital_pin_number = analog_pin_number + number of digital pins Looking at the Uno: A0 = 14, A1 = 15, and so forth. Looking at a Mega2560 which has 54 digital pins: A0 = 54, A1 = 55, etc. PymataExpress requires that before using a pin, its mode must be explicitly set. This is accomplished using one of the pymata-express mode setting methods. In this section, the methods to set pin modes are presented. For each API method, a link to an example is provided. ANALOG PIN MODE set_pin_mode_analog_input async def set_pin_mode_analog_input(self, pin_number, callback=None, differential=1) Set a pin as an analog input. :param pin_number: arduino pin number :param callback: async callback function :param differential: This value needs to be met for a callback to be invoked. callback returns a data list: [pin_type, pin_number, pin_value, raw_time_stamp] The pin_type for analog input pins = 2 Examples: analog_input_with_time_stamps.py analog_input_with_time_stamps_oo.py Notes: When an analog input message is received from Firmata, the current reported data value is compared with that of the previously reported value. If the difference, either positive or negative, is greater than the differential parameter, then the callback is invoked. This is useful when you have a \"noisy\" input that may constantly fluctuate by a small value, and you wish to ignore the noise. Pymata-express refers to analog pins using the numeric portion of the pin number only. For example, pin A3 is referred to as pin 3. Data reporting via callbacks for this pin begins immediately after this method is called. DIGITAL PIN MODES set_pin_mode_digital_input async def set_pin_mode_digital_input(self, pin_number, callback=None) Set a pin as a digital input. :param pin_number: arduino pin number :param callback: async callback function callback returns a data list: [pin_type, pin_number, pin_value, raw_time_stamp] The pin_type for digital input pins = 0 Examples: digital_input.py digital_input_debounce.py Notes: Data reporting via callbacks for this pin begins immediately after this method is called. set_pin_mode_digital_input_pullup async def set_pin_mode_digital_input_pullup(self, pin_number, callback=None) Set a pin as a digital input with pullup enabled. :param pin_number: arduino pin number :param callback: async callback function callback returns a data list: [pin_type, pin_number, pin_value, raw_time_stamp] The pin_type for digital input pins with pullups enabled = 11 Example: digital_input_pullup.py Notes: Data reporting via callbacks for this pin begins immediately after this method is called. set_pin_mode_digital_output async def set_pin_mode_digital_output(self, pin_number) Set a pin as a digital output pin. :param pin_number: arduino pin number Examples: digital_output.py digital_pin_output.py set_pin_mode_pwm async def set_pin_mode_pwm(self, pin_number) This is an alias for set_pin_mode_pwm_output. Set a pin as a pwm (analog output) pin. :param pin_number:arduino pin number Example: 1. pwm_analog_output.py Notes: Only specific digital pins support PWM mode. Check with the Arduino documentation to determine which pins support PWM for your board. set_pin_mode_pwm_output async def set_pin_mode_pwm_output(self, pin_number) Set a pin as a pwm (analog output) pin. :param pin_number:arduino pin number Example: 1. pwm_analog_output.py Notes: Only specific digital pins support PWM mode. Check with the Arduino documentation to determine which pins support PWM for your board. DEVICE TYPE PIN MODES set_pin_mode_dht def set_pin_mode_dht(self, pin_number, sensor_type=22, differential=.1, callback=None): \"\"\" Configure a DHT sensor prior to operation. Up to 6 DHT sensors are supported :param pin_number: digital pin number on arduino. :param sensor_type: type of dht sensor Valid values = DHT11, DHT12, DHT22, DHT21, AM2301 :param differential: This value needs to be met for a callback to be invoked. :param callback: callback function callback: returns a data list: [pin_type, pin_number, DHT type, humidity value, temperature raw_time_stamp] The pin_type for DHT input pins = 15 ERROR CODES: If either humidity or temperature value: == -1 Configuration Error == -2 Checksum Error == -3 Timeout Error \"\"\" Examples: dht.py Notes: You may reset the differential value by calling this method again with a new differential value. set_pin_mode_i2c async def set_pin_mode_i2c(self, read_delay_time=0) Establish the standard Arduino i2c pins for i2c utilization. NOTE: THIS METHOD MUST BE CALLED BEFORE ANY I2C REQUEST IS MADE This method initializes Firmata for I2c operations. :param read_delay_time (in microseconds): an optional parameter, default is 0 Example: 1. i2c_adxl345_accelerometer.py Notes: Callbacks are set within the individual i2c read methods of this API. See i2c_read, i2c_read_continuous, or i2c_read_restart_transmission. set_pin_mode_servo async def set_pin_mode_servo(self, pin, min_pulse=544, max_pulse=2400) Configure a pin as a servo pin. Set pulse min, max in ms. :param pin: Servo Pin. :param min_pulse: Min pulse width in ms. :param max_pulse: Max pulse width in ms. Example: 1. servo.py set_pin_mode_sonar async def set_pin_mode_sonar(self, trigger_pin, echo_pin, callback=None, timeout=80000) This is a FirmataExpress feature. Configure the pins,ping interval and maximum distance for an HC-SR04 type device. Up to a maximum of 6 SONAR devices is supported. If the maximum is exceeded a message is sent to the console and the request is ignored. NOTE: data is measured in centimeters :param trigger_pin: The pin number of for the trigger (transmitter). :param echo_pin: The pin number for the received echo. :param callback: optional callback function to report sonar data changes :param timeout: a tuning parameter. 80000UL equals 80ms. callback returns a data list: [pin_type, trigger_pin_number, distance_value (in cm), raw_time_stamp] The pin_type for sonar pins = 12 Example: 1. hc-sr04_distance_sensor.py set_pin_mode_stepper async def set_pin_mode_stepper(self, steps_per_revolution, stepper_pins) This is a FirmataExpress feature. Configure stepper motor prior to operation. This is a FirmataPlus feature. NOTE: Single stepper only. Multiple steppers not supported. :param steps_per_revolution: number of steps per motor revolution :param stepper_pins: a list of control pin numbers - either 4 or 2 Example: 1. stepper.py Notes: Only a single stepper motor is supported. set_pin_mode_tone async def set_pin_mode_tone(self, pin_number) This is FirmataExpress feature. Set a PWM pin to tone mode. :param pin_number: arduino pin number Example: 1. play_tone.py Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Setting Pin Modes"},{"location":"pin_modes/#introduction","text":"An Arduino pin can be configured to operate in one of several modes. The modes available to any given pin is dependent upon pin type. For example, a digital pin may be configured for input, output, and for some digital pins, PWM output operation. Analog input pins are even more flexible. They may be configured for analog input, digital input, or digital output operation.","title":"Introduction"},{"location":"pin_modes/#mapping-analog-pin-numbers-to-digital-pin-numbers","text":"When configuring an analog input pin as a digital input, you must use the pin's digital pin number equivalent. For example, on an Arduino Uno, if you wish to use pin A0 as a digital pin, the digital pin number equivalent is 14. In general, to find the digital equivalent of pin A0 for your specific Arduino board type, the algorithm is: digital_pin_number = analog_pin_number + number of digital pins Looking at the Uno: A0 = 14, A1 = 15, and so forth. Looking at a Mega2560 which has 54 digital pins: A0 = 54, A1 = 55, etc. PymataExpress requires that before using a pin, its mode must be explicitly set. This is accomplished using one of the pymata-express mode setting methods. In this section, the methods to set pin modes are presented. For each API method, a link to an example is provided.","title":"Mapping Analog Pin Numbers To Digital Pin Numbers"},{"location":"pin_modes/#analog-pin-mode","text":"","title":"ANALOG PIN MODE"},{"location":"pin_modes/#set_pin_mode_analog_input","text":"async def set_pin_mode_analog_input(self, pin_number, callback=None, differential=1) Set a pin as an analog input. :param pin_number: arduino pin number :param callback: async callback function :param differential: This value needs to be met for a callback to be invoked. callback returns a data list: [pin_type, pin_number, pin_value, raw_time_stamp] The pin_type for analog input pins = 2 Examples: analog_input_with_time_stamps.py analog_input_with_time_stamps_oo.py Notes: When an analog input message is received from Firmata, the current reported data value is compared with that of the previously reported value. If the difference, either positive or negative, is greater than the differential parameter, then the callback is invoked. This is useful when you have a \"noisy\" input that may constantly fluctuate by a small value, and you wish to ignore the noise. Pymata-express refers to analog pins using the numeric portion of the pin number only. For example, pin A3 is referred to as pin 3. Data reporting via callbacks for this pin begins immediately after this method is called.","title":"set_pin_mode_analog_input"},{"location":"pin_modes/#digital-pin-modes","text":"","title":"DIGITAL PIN MODES"},{"location":"pin_modes/#set_pin_mode_digital_input","text":"async def set_pin_mode_digital_input(self, pin_number, callback=None) Set a pin as a digital input. :param pin_number: arduino pin number :param callback: async callback function callback returns a data list: [pin_type, pin_number, pin_value, raw_time_stamp] The pin_type for digital input pins = 0 Examples: digital_input.py digital_input_debounce.py Notes: Data reporting via callbacks for this pin begins immediately after this method is called.","title":"set_pin_mode_digital_input"},{"location":"pin_modes/#set_pin_mode_digital_input_pullup","text":"async def set_pin_mode_digital_input_pullup(self, pin_number, callback=None) Set a pin as a digital input with pullup enabled. :param pin_number: arduino pin number :param callback: async callback function callback returns a data list: [pin_type, pin_number, pin_value, raw_time_stamp] The pin_type for digital input pins with pullups enabled = 11 Example: digital_input_pullup.py Notes: Data reporting via callbacks for this pin begins immediately after this method is called.","title":"set_pin_mode_digital_input_pullup"},{"location":"pin_modes/#set_pin_mode_digital_output","text":"async def set_pin_mode_digital_output(self, pin_number) Set a pin as a digital output pin. :param pin_number: arduino pin number Examples: digital_output.py digital_pin_output.py","title":"set_pin_mode_digital_output"},{"location":"pin_modes/#set_pin_mode_pwm","text":"async def set_pin_mode_pwm(self, pin_number) This is an alias for set_pin_mode_pwm_output. Set a pin as a pwm (analog output) pin. :param pin_number:arduino pin number Example: 1. pwm_analog_output.py Notes: Only specific digital pins support PWM mode. Check with the Arduino documentation to determine which pins support PWM for your board.","title":"set_pin_mode_pwm"},{"location":"pin_modes/#set_pin_mode_pwm_output","text":"async def set_pin_mode_pwm_output(self, pin_number) Set a pin as a pwm (analog output) pin. :param pin_number:arduino pin number Example: 1. pwm_analog_output.py Notes: Only specific digital pins support PWM mode. Check with the Arduino documentation to determine which pins support PWM for your board.","title":"set_pin_mode_pwm_output"},{"location":"pin_modes/#device-type-pin-modes","text":"","title":"DEVICE TYPE PIN MODES"},{"location":"pin_modes/#set_pin_mode_dht","text":"def set_pin_mode_dht(self, pin_number, sensor_type=22, differential=.1, callback=None): \"\"\" Configure a DHT sensor prior to operation. Up to 6 DHT sensors are supported :param pin_number: digital pin number on arduino. :param sensor_type: type of dht sensor Valid values = DHT11, DHT12, DHT22, DHT21, AM2301 :param differential: This value needs to be met for a callback to be invoked. :param callback: callback function callback: returns a data list: [pin_type, pin_number, DHT type, humidity value, temperature raw_time_stamp] The pin_type for DHT input pins = 15 ERROR CODES: If either humidity or temperature value: == -1 Configuration Error == -2 Checksum Error == -3 Timeout Error \"\"\" Examples: dht.py Notes: You may reset the differential value by calling this method again with a new differential value.","title":"set_pin_mode_dht"},{"location":"pin_modes/#set_pin_mode_i2c","text":"async def set_pin_mode_i2c(self, read_delay_time=0) Establish the standard Arduino i2c pins for i2c utilization. NOTE: THIS METHOD MUST BE CALLED BEFORE ANY I2C REQUEST IS MADE This method initializes Firmata for I2c operations. :param read_delay_time (in microseconds): an optional parameter, default is 0 Example: 1. i2c_adxl345_accelerometer.py Notes: Callbacks are set within the individual i2c read methods of this API. See i2c_read, i2c_read_continuous, or i2c_read_restart_transmission.","title":"set_pin_mode_i2c"},{"location":"pin_modes/#set_pin_mode_servo","text":"async def set_pin_mode_servo(self, pin, min_pulse=544, max_pulse=2400) Configure a pin as a servo pin. Set pulse min, max in ms. :param pin: Servo Pin. :param min_pulse: Min pulse width in ms. :param max_pulse: Max pulse width in ms. Example: 1. servo.py","title":"set_pin_mode_servo"},{"location":"pin_modes/#set_pin_mode_sonar","text":"async def set_pin_mode_sonar(self, trigger_pin, echo_pin, callback=None, timeout=80000) This is a FirmataExpress feature. Configure the pins,ping interval and maximum distance for an HC-SR04 type device. Up to a maximum of 6 SONAR devices is supported. If the maximum is exceeded a message is sent to the console and the request is ignored. NOTE: data is measured in centimeters :param trigger_pin: The pin number of for the trigger (transmitter). :param echo_pin: The pin number for the received echo. :param callback: optional callback function to report sonar data changes :param timeout: a tuning parameter. 80000UL equals 80ms. callback returns a data list: [pin_type, trigger_pin_number, distance_value (in cm), raw_time_stamp] The pin_type for sonar pins = 12 Example: 1. hc-sr04_distance_sensor.py","title":"set_pin_mode_sonar"},{"location":"pin_modes/#set_pin_mode_stepper","text":"async def set_pin_mode_stepper(self, steps_per_revolution, stepper_pins) This is a FirmataExpress feature. Configure stepper motor prior to operation. This is a FirmataPlus feature. NOTE: Single stepper only. Multiple steppers not supported. :param steps_per_revolution: number of steps per motor revolution :param stepper_pins: a list of control pin numbers - either 4 or 2 Example: 1. stepper.py Notes: Only a single stepper motor is supported.","title":"set_pin_mode_stepper"},{"location":"pin_modes/#set_pin_mode_tone","text":"async def set_pin_mode_tone(self, pin_number) This is FirmataExpress feature. Set a PWM pin to tone mode. :param pin_number: arduino pin number Example: 1. play_tone.py Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"set_pin_mode_tone"},{"location":"polling/","text":"Processing Input Data Before discussing the API, understanding how both Firmata generates input data notification messages, as well as how pymata-express processes these messages, may be beneficial in designing your application. Understanding the differences between using a callback versus polling is crucial when designing your application. Firmata Data Collection Both the FirmataExpress and StandardFirmata sketches poll all input pins within the loop method of the sketch. Firmata builds notification messages containing the pin number, pin type, and data value, and transmits these messages to pymata-express over the serial link. Firmata Data Polling Digital Input For digital input pins, all the pins are polled with each iteration of the sketch loop , with no delays. If the state of a pin has changed since the last loop iteration, Firmata creates a notification message and transmits the message over the serial link to pymata-express. Analog Input For analog input pins, each pin is polled, and its current value is reported, regardless of change. All analog input pins are nominally polled every 19 milliseconds. I2C Input Unlike digital and analog inputs, most I2C devices report values only when a read request is issued to the i2c device. For these i2c devices, a read request results in a single reply. Some i2c devices may be placed in a continuous read mode. In this mode, the i2c device automatically sends update notifications, usually as quickly as possible. When in continuous i2c mode, the Firmata loop retrieves cached responses at a nominal polling rate of 19 milliseconds. Sonar (HC-SR04) Input FirmataExpress supports HC-SR04 type distance sensors. The Firmata loop polls each device and reports its current value regardless of change. The polling rate is nominally every 40 milliseconds for HC-SR04 type devices. Using Pymata-Express To Access Input Data Polling For Input Data Changes As pymata-express receives input data notifications, it caches the data in internal data structures. These data structures retain the value reported as well as the time of occurrence. The application may query or poll these data structures to obtain the latest data updates for a given pin. The pymata-express API methods that implement polling are: analog_read digital_read i2c_read_saved_data sonar_read A more efficient and automatic way for your application to be notified of data updates is to use the pymata-express callback feature. Using Callbacks Instead Of Polling Callback notification is much more efficient than using polling. A callback is simply a function or method written by you, that is called automatically by pymata-express when it receives an input data notification message from Firmata. You may optionally register callback functions when using any of the following pymata-express API methods: set_pin_mode_analog_input set_pin_mode_digital_input set_pin_mode_digital_input_pullup set_pin_mode_sonar enable_analog_reporting (an alias for set_pin_mode_analog_input) i2c_read i2c_read_continuous i2c_read_restart_transmission You may write a callback function for each input pin, write a callback function to handle any pin of single type, such as analog input or digital input, or even have a single callback function handle all input data notifications. You may use callbacks with some pins while using polling for others. Polling is available for all input pins whether callbacks are in use or not. A callback function is specified to accept a single input parameter, typically named data . The input parameter will be filled with a list when pymata-express invokes the callback. A description of what is contained in the list is provided in the reference API. def my_callback(data): \"\"\" :param data: a list containing pin type, pin number, data value and time-stamp \"\"\" # Your code goes here to process the data TIP : You should keep callback functions as short as possible. If processing callback data within the callback function results in blocking your application, you may wish to consider spawning a separate processing thread. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Understanding Input Data Collection"},{"location":"polling/#processing-input-data","text":"Before discussing the API, understanding how both Firmata generates input data notification messages, as well as how pymata-express processes these messages, may be beneficial in designing your application. Understanding the differences between using a callback versus polling is crucial when designing your application.","title":"Processing Input Data"},{"location":"polling/#firmata-data-collection","text":"Both the FirmataExpress and StandardFirmata sketches poll all input pins within the loop method of the sketch. Firmata builds notification messages containing the pin number, pin type, and data value, and transmits these messages to pymata-express over the serial link.","title":"Firmata Data Collection"},{"location":"polling/#firmata-data-polling","text":"","title":"Firmata Data Polling"},{"location":"polling/#digital-input","text":"For digital input pins, all the pins are polled with each iteration of the sketch loop , with no delays. If the state of a pin has changed since the last loop iteration, Firmata creates a notification message and transmits the message over the serial link to pymata-express.","title":"Digital Input"},{"location":"polling/#analog-input","text":"For analog input pins, each pin is polled, and its current value is reported, regardless of change. All analog input pins are nominally polled every 19 milliseconds.","title":"Analog Input"},{"location":"polling/#i2c-input","text":"Unlike digital and analog inputs, most I2C devices report values only when a read request is issued to the i2c device. For these i2c devices, a read request results in a single reply. Some i2c devices may be placed in a continuous read mode. In this mode, the i2c device automatically sends update notifications, usually as quickly as possible. When in continuous i2c mode, the Firmata loop retrieves cached responses at a nominal polling rate of 19 milliseconds.","title":"I2C Input"},{"location":"polling/#sonar-hc-sr04-input","text":"FirmataExpress supports HC-SR04 type distance sensors. The Firmata loop polls each device and reports its current value regardless of change. The polling rate is nominally every 40 milliseconds for HC-SR04 type devices.","title":"Sonar (HC-SR04) Input"},{"location":"polling/#using-pymata-express-to-access-input-data","text":"","title":"Using Pymata-Express To Access Input Data"},{"location":"polling/#polling-for-input-data-changes","text":"As pymata-express receives input data notifications, it caches the data in internal data structures. These data structures retain the value reported as well as the time of occurrence. The application may query or poll these data structures to obtain the latest data updates for a given pin. The pymata-express API methods that implement polling are: analog_read digital_read i2c_read_saved_data sonar_read A more efficient and automatic way for your application to be notified of data updates is to use the pymata-express callback feature.","title":"Polling For Input Data Changes"},{"location":"polling/#using-callbacks-instead-of-polling","text":"Callback notification is much more efficient than using polling. A callback is simply a function or method written by you, that is called automatically by pymata-express when it receives an input data notification message from Firmata. You may optionally register callback functions when using any of the following pymata-express API methods: set_pin_mode_analog_input set_pin_mode_digital_input set_pin_mode_digital_input_pullup set_pin_mode_sonar enable_analog_reporting (an alias for set_pin_mode_analog_input) i2c_read i2c_read_continuous i2c_read_restart_transmission You may write a callback function for each input pin, write a callback function to handle any pin of single type, such as analog input or digital input, or even have a single callback function handle all input data notifications. You may use callbacks with some pins while using polling for others. Polling is available for all input pins whether callbacks are in use or not. A callback function is specified to accept a single input parameter, typically named data . The input parameter will be filled with a list when pymata-express invokes the callback. A description of what is contained in the list is provided in the reference API. def my_callback(data): \"\"\" :param data: a list containing pin type, pin number, data value and time-stamp \"\"\" # Your code goes here to process the data TIP : You should keep callback functions as short as possible. If processing callback data within the callback function results in blocking your application, you may wish to consider spawning a separate processing thread. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Using Callbacks Instead Of Polling"},{"location":"python_3_7_install/","text":"VERIFYING THE PYTHON VERSION ON YOUR COMPUTER Pymata Express utilizes the latest advances of the Python 3.7 asyncio library. To check that you have Python 3.7 or greater installed open a command window and type: python3 -V For Windows, you may need to type: python -V The Python version will be displayed: python3 Python 3.7.2 (default, Dec 31 2018, 14:25:33) [GCC 8.2.0] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> For Windows users, this may look something like: C:\\Users\\Alan>python Python 3.7.2 (tags/v3.7.2:9a3ffc0492, Dec 23 2018, 23:09:28) [MSC v.1916 64 bit (AMD64)] on win32 Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> INSTALLING PYTHON 3.7 Windows Users To install Python 3.7 or later, go to the Python home page, and download the latest 3.7 (or later) distribution for your operating system. If you have Python 2.7 installed, you do not need to remove it. During the installation process, if there is a checkbox to add Python 3.7 to your path, make sure it is checked before proceeding with the installation. Linux Users If you are using Linux, here are the build and installation instructions sudo apt-get update sudo apt-get upgrade sudo apt-get dist-upgrade sudo apt-get install build-essential python-dev python-setuptools python-pip python-smbus sudo apt-get install build-essential libncursesw5-dev libgdbm-dev libc6-dev sudo apt-get install zlib1g-dev libsqlite3-dev tk-dev sudo apt-get install libssl-dev openssl libreadline-dev libffi-dev cd ~ mkdir build cd build wget https://www.python.org/ftp/python/3.7.2/Python-3.7.2.tgz tar -zxvf Python-3.7.2.tgz cd Python-3.7.2 ./configure make sudo make install Install pip For Debian based distributions: sudo apt-get install pip3-python For all other distributions - refer to your distribution's instructions. Mac Users Install Python 3.7.x from https://www.python.org/downloads/ or via homebrew Download get-pip.py from https://bootstrap.pypa.io/get-pip.py and install (this should already be installed if python was installed from python.org or homebrew): curl -O https://bootstrap.pypa.io/get-pip.py sudo python3 get-pip.py Verify The Python Installation Use the procedure shown here to verify that you have successfully installed Python 3.7 on your computer. Copyright (C) 2019-2020 Alan Yorinks. All Rights Reserved.","title":"Verifying Python 3 Version"},{"location":"python_3_7_install/#verifying-the-python-version-on-your-computer","text":"Pymata Express utilizes the latest advances of the Python 3.7 asyncio library. To check that you have Python 3.7 or greater installed open a command window and type: python3 -V For Windows, you may need to type: python -V The Python version will be displayed: python3 Python 3.7.2 (default, Dec 31 2018, 14:25:33) [GCC 8.2.0] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> For Windows users, this may look something like: C:\\Users\\Alan>python Python 3.7.2 (tags/v3.7.2:9a3ffc0492, Dec 23 2018, 23:09:28) [MSC v.1916 64 bit (AMD64)] on win32 Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>>","title":"VERIFYING THE PYTHON VERSION ON YOUR COMPUTER"},{"location":"python_3_7_install/#installing-python-37","text":"","title":"INSTALLING PYTHON 3.7"},{"location":"python_3_7_install/#windows-users","text":"To install Python 3.7 or later, go to the Python home page, and download the latest 3.7 (or later) distribution for your operating system. If you have Python 2.7 installed, you do not need to remove it. During the installation process, if there is a checkbox to add Python 3.7 to your path, make sure it is checked before proceeding with the installation.","title":"Windows Users"},{"location":"python_3_7_install/#linux-users","text":"If you are using Linux, here are the build and installation instructions sudo apt-get update sudo apt-get upgrade sudo apt-get dist-upgrade sudo apt-get install build-essential python-dev python-setuptools python-pip python-smbus sudo apt-get install build-essential libncursesw5-dev libgdbm-dev libc6-dev sudo apt-get install zlib1g-dev libsqlite3-dev tk-dev sudo apt-get install libssl-dev openssl libreadline-dev libffi-dev cd ~ mkdir build cd build wget https://www.python.org/ftp/python/3.7.2/Python-3.7.2.tgz tar -zxvf Python-3.7.2.tgz cd Python-3.7.2 ./configure make sudo make install Install pip For Debian based distributions: sudo apt-get install pip3-python For all other distributions - refer to your distribution's instructions.","title":"Linux Users"},{"location":"python_3_7_install/#mac-users","text":"Install Python 3.7.x from https://www.python.org/downloads/ or via homebrew Download get-pip.py from https://bootstrap.pypa.io/get-pip.py and install (this should already be installed if python was installed from python.org or homebrew): curl -O https://bootstrap.pypa.io/get-pip.py sudo python3 get-pip.py","title":"Mac Users"},{"location":"python_3_7_install/#verify-the-python-installation","text":"Use the procedure shown here to verify that you have successfully installed Python 3.7 on your computer. Copyright (C) 2019-2020 Alan Yorinks. All Rights Reserved.","title":"Verify The Python Installation"},{"location":"python_3_verify/","text":"How To Verify The Python 3 Version Installed To check that you have Python 3.7 or higher installed open a command window and type: python3 -V For Windows, you may need to type: python -V The Python version will be displayed: python3 Python 3.7.2 (default, Dec 31 2018, 14:25:33) [GCC 8.2.0] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> For Windows users, this may look something like: C:\\Users\\Alan>python Python 3.7.2 (tags/v3.7.2:9a3ffc0492, Dec 23 2018, 23:09:28) [MSC v.1916 64 bit (AMD64)] on win32 Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> If you need to install Python 3.7 or greater, please go to the next section. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"How To Verify The Python 3 Version Installed"},{"location":"python_3_verify/#how-to-verify-the-python-3-version-installed","text":"To check that you have Python 3.7 or higher installed open a command window and type: python3 -V For Windows, you may need to type: python -V The Python version will be displayed: python3 Python 3.7.2 (default, Dec 31 2018, 14:25:33) [GCC 8.2.0] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> For Windows users, this may look something like: C:\\Users\\Alan>python Python 3.7.2 (tags/v3.7.2:9a3ffc0492, Dec 23 2018, 23:09:28) [MSC v.1916 64 bit (AMD64)] on win32 Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> If you need to install Python 3.7 or greater, please go to the next section. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"How To Verify The Python 3 Version Installed"},{"location":"python_install/","text":"INSTALLING PYTHON 3.7 OR GREATER Windows Users To install Python 3.x, go to the Python home page, and download the latest Python 3 distribution for your operating system. During the installation process, if there is a checkbox to add Python 3.x to your path, make sure it is checked before proceeding with the installation. Linux Users Raspberry Pi Raspbian Users If your copy of Raspbian is using Python 3.7 or greater, you should be all set to proceed. Ubuntu and Other Debian Based Linux Distributions You may need to install pip3. To check, open a terminal and type: which pip3 If a path to pip3 is not reported, you will need to install it. Open a terminal window and type: sudo apt-get install pip3-python You should then make sure you have the latest version by typing: sudo pip3 install -U pip For All Other Linux Distributions Refer to your distribution's instructions. Mac Users Install Python 3.7.x from https://www.python.org/downloads/ or via homebrew Download get-pip.py from https://bootstrap.pypa.io/get-pip.py and install (this should already be installed if python was installed from python.org or homebrew): curl -O https://bootstrap.pypa.io/get-pip.py sudo python3 get-pip.py Verify The Python Installation Use the procedure shown here to verify that you have successfully installed Python 3.7 on your computer. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Python 3 Installation"},{"location":"python_install/#installing-python-37-or-greater","text":"","title":"INSTALLING PYTHON 3.7 OR GREATER"},{"location":"python_install/#windows-users","text":"To install Python 3.x, go to the Python home page, and download the latest Python 3 distribution for your operating system. During the installation process, if there is a checkbox to add Python 3.x to your path, make sure it is checked before proceeding with the installation.","title":"Windows Users"},{"location":"python_install/#linux-users","text":"","title":"Linux Users"},{"location":"python_install/#raspberry-pi-raspbian-users","text":"If your copy of Raspbian is using Python 3.7 or greater, you should be all set to proceed.","title":"Raspberry Pi Raspbian Users"},{"location":"python_install/#ubuntu-and-other-debian-based-linux-distributions","text":"You may need to install pip3. To check, open a terminal and type: which pip3 If a path to pip3 is not reported, you will need to install it. Open a terminal window and type: sudo apt-get install pip3-python You should then make sure you have the latest version by typing: sudo pip3 install -U pip","title":"Ubuntu and Other Debian Based Linux Distributions"},{"location":"python_install/#for-all-other-linux-distributions","text":"Refer to your distribution's instructions.","title":"For All Other Linux Distributions"},{"location":"python_install/#mac-users","text":"Install Python 3.7.x from https://www.python.org/downloads/ or via homebrew Download get-pip.py from https://bootstrap.pypa.io/get-pip.py and install (this should already be installed if python was installed from python.org or homebrew): curl -O https://bootstrap.pypa.io/get-pip.py sudo python3 get-pip.py","title":"Mac Users"},{"location":"python_install/#verify-the-python-installation","text":"Use the procedure shown here to verify that you have successfully installed Python 3.7 on your computer. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Verify The Python Installation"},{"location":"report_requests/","text":"Informational Reports All of the following methods are synchronous. The methods block until they return. get_analog_map async def get_analog_map(self) This method requests a Firmata analog map query and returns the results. :returns: An analog map response or None if a timeout occurs Example: retrieve_analog_map.py Notes: Refer to the Firmata Protocol specification for an explanation of the report data. get_capability_report async def get_capability_report(self) This method requests and returns a Firmata capability query report :returns: A capability report in the form of a list Example: 1. retrieve_capability_report.py Notes: Refer to the Firmata Protocol specification for an explanation of the report data.] get_firmware_version async def get_firmware_version(self) This method retrieves the Firmata firmware version :returns: Firmata firmware version Example: retrieve_firmware_version.py Notes: This report will return the major and minor numbers of the release and the firmware name. get_pin_state async def get_pin_state(self, pin) This method retrieves a pin state report for the specified pin. Pin modes reported: INPUT = 0x00 # digital input mode OUTPUT = 0x01 # digital output mode ANALOG = 0x02 # analog input mode PWM = 0x03 # digital pin in PWM output mode SERVO = 0x04 # digital pin in Servo output mode I2C = 0x06 # pin included in I2C setup STEPPER = 0x08 # digital pin in stepper mode PULLUP = 0x0b # digital pin in input pullup mode SONAR = 0x0c # digital pin in SONAR mode TONE = 0x0d # digital pin in tone mode :param pin: Pin of interest :returns: pin state report Example: retrieve_pin_state.py Notes: Refer to the Firmata Protocol specification for an explanation of the report data.] get_protocol_version async def get_protocol_version(self) This method returns the major and minor values for the protocol version, i.e. 2.5 :returns: Firmata protocol version Example: retrieve_protocol_version.py get_pymata_version async def get_pymata_version(self) This method retrieves the PyMata Express version number :returns: PyMata Express version number. Example: retrieve_pymata_version.py Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Report Requests"},{"location":"report_requests/#informational-reports","text":"All of the following methods are synchronous. The methods block until they return.","title":"Informational Reports"},{"location":"report_requests/#get_analog_map","text":"async def get_analog_map(self) This method requests a Firmata analog map query and returns the results. :returns: An analog map response or None if a timeout occurs Example: retrieve_analog_map.py Notes: Refer to the Firmata Protocol specification for an explanation of the report data.","title":"get_analog_map"},{"location":"report_requests/#get_capability_report","text":"async def get_capability_report(self) This method requests and returns a Firmata capability query report :returns: A capability report in the form of a list Example: 1. retrieve_capability_report.py Notes: Refer to the Firmata Protocol specification for an explanation of the report data.]","title":"get_capability_report"},{"location":"report_requests/#get_firmware_version","text":"async def get_firmware_version(self) This method retrieves the Firmata firmware version :returns: Firmata firmware version Example: retrieve_firmware_version.py Notes: This report will return the major and minor numbers of the release and the firmware name.","title":"get_firmware_version"},{"location":"report_requests/#get_pin_state","text":"async def get_pin_state(self, pin) This method retrieves a pin state report for the specified pin. Pin modes reported: INPUT = 0x00 # digital input mode OUTPUT = 0x01 # digital output mode ANALOG = 0x02 # analog input mode PWM = 0x03 # digital pin in PWM output mode SERVO = 0x04 # digital pin in Servo output mode I2C = 0x06 # pin included in I2C setup STEPPER = 0x08 # digital pin in stepper mode PULLUP = 0x0b # digital pin in input pullup mode SONAR = 0x0c # digital pin in SONAR mode TONE = 0x0d # digital pin in tone mode :param pin: Pin of interest :returns: pin state report Example: retrieve_pin_state.py Notes: Refer to the Firmata Protocol specification for an explanation of the report data.]","title":"get_pin_state"},{"location":"report_requests/#get_protocol_version","text":"async def get_protocol_version(self) This method returns the major and minor values for the protocol version, i.e. 2.5 :returns: Firmata protocol version Example: retrieve_protocol_version.py","title":"get_protocol_version"},{"location":"report_requests/#get_pymata_version","text":"async def get_pymata_version(self) This method retrieves the PyMata Express version number :returns: PyMata Express version number. Example: retrieve_pymata_version.py Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"get_pymata_version"}]}